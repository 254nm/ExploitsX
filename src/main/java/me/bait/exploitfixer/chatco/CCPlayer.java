/*
 * .. _____________________ ..
 *  -- // WARNING \\ --
 *  -- THIS WORK IS UNDER EXCLUSIVE COPRIGHT FOR BAITCORP LABS. DISTRIBUTION, MODIFICATION, SELLING, OR SHARING WITHOUT EXPLICIT PERMISSION FROM BAITCORP LABS IS STRICTLY PROHIBITED.
 *  -- THIS PROGRAM IS LICENSED FOR MODIFICATION TO AND ONLY TO: "BAITCORP LABS" [FR], "CCHOST PARIS" [FR].
 *  --
 *  -- ExploitsX Sebastian Giheta 2019-2020
 * .. _____________________ ..
 *
 * .. _____________________ ..
 *  ___________              .__         .__  __         ____  ___              _________ .__            __   _________
 *  \_   _____/__  _________ |  |   ____ |__|/  |_  _____\   \/  /     .__      \_   ___ \|  |__ _____ _/  |_ \_   ___ \  ____
 *   |    __)_\  \/  /\____ \|  |  /  _ \|  \   __\/  ___/\     /    __|  |___  /    \  \/|  |  \\__  \\   __\/    \  \/ /  _ \
 *   |        \>    < |  |_> >  |_(  <_> )  ||  |  \___ \ /     \   /__    __/  \     \___|   Y  \/ __ \|  |  \     \___(  <_> )
 *  /_______  /__/\_ \|   __/|____/\____/|__||__| /____  >___/\  \     |__|      \______  /___|  (____  /__|   \______  /\____/
 *          \/      \/|__|                             \/      \_/                      \/     \/     \/              \/
 *
 *  ExploitsX by Sebastian Giheta, owner of 8b8t.xyz
 * .. _____________________ ..
 */

package me.bait.exploitfixer.chatco;

import me.bait.exploitfixer.exploitfixer;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;

import java.io.*;
import java.util.ArrayList;
import java.util.List;


public class CCPlayer {
	public Player player;
	public String playerName;
	public boolean chatDisabled;
	public boolean tellsDisabled;
	public String LastMessenger;
	private File IgnoreList;
	private List<String> ignores;

	public CCPlayer(Player p, String pN) throws IOException {
		this.player = p;
		this.playerName = pN;
		this.chatDisabled = false;
		this.tellsDisabled = false;
		this.LastMessenger = null;
		saveIgnoreList("");
	}

	public List<String> getIgnoreList() {
		return this.ignores;
	}

	public Player getLastMessenger() {
		if (LastMessenger != null) return Bukkit.getPlayer(LastMessenger);
		return null;
	}

	public void setLastMessenger(Player sender) {
		this.LastMessenger = sender.getName();
	}

	public boolean isIgnored(String p) {
		return this.ignores.contains(p);
	}

	public void saveIgnoreList(String p) throws IOException {
		this.IgnoreList = new File(exploitfixer.dataFolder, "/ignorelists/" + this.playerName + ".txt");
		if (!this.IgnoreList.exists()) {
			this.IgnoreList.getParentFile().mkdir();
			FileWriter fwo = new FileWriter(this.IgnoreList, true);
			BufferedWriter bwo = new BufferedWriter(fwo);
			bwo.close();
		}
		if (!p.equals("")) if (!isIgnored(p)) {
			FileWriter fwo = new FileWriter(this.IgnoreList, true);
			BufferedWriter bwo = new BufferedWriter(fwo);
			bwo.write(p);
			bwo.newLine();
			bwo.close();
		} else {
			ignores.remove(p);
			ignores.remove("");
			FileWriter fwo = new FileWriter(this.IgnoreList);
			BufferedWriter bwo = new BufferedWriter(fwo);
			for (String print : this.ignores) {
				bwo.write(print);
				bwo.newLine();
			}
			bwo.close();
		}
		updateIgnoreList();
	}

	private void updateIgnoreList() throws IOException {
		FileInputStream file = new FileInputStream(this.IgnoreList);
		InputStreamReader fileReader = new InputStreamReader(file);
		BufferedReader inIgnores = new BufferedReader(fileReader);
		String data = inIgnores.readLine();
		this.ignores = new ArrayList<>();
		while (data != null) {
			this.ignores.add(data);
			data = inIgnores.readLine();
		}
		file.close();
	}
}
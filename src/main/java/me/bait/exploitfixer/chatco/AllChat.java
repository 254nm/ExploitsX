/*
 * .. _____________________ ..
 *  -- // WARNING \\ --
 *  -- THIS WORK IS UNDER EXCLUSIVE COPRIGHT FOR BAITCORP LABS. DISTRIBUTION, MODIFICATION, SELLING, OR SHARING WITHOUT EXPLICIT PERMISSION FROM BAITCORP LABS IS STRICTLY PROHIBITED.
 *  -- THIS PROGRAM IS LICENSED FOR MODIFICATION TO AND ONLY TO: "BAITCORP LABS" [FR], "CCHOST PARIS" [FR].
 *  --
 *  -- ExploitsX Sebastian Giheta 2019-2020
 * .. _____________________ ..
 *
 * .. _____________________ ..
 *  ___________              .__         .__  __         ____  ___              _________ .__            __   _________
 *  \_   _____/__  _________ |  |   ____ |__|/  |_  _____\   \/  /     .__      \_   ___ \|  |__ _____ _/  |_ \_   ___ \  ____
 *   |    __)_\  \/  /\____ \|  |  /  _ \|  \   __\/  ___/\     /    __|  |___  /    \  \/|  |  \\__  \\   __\/    \  \/ /  _ \
 *   |        \>    < |  |_> >  |_(  <_> )  ||  |  \___ \ /     \   /__    __/  \     \___|   Y  \/ __ \|  |  \     \___(  <_> )
 *  /_______  /__/\_ \|   __/|____/\____/|__||__| /____  >___/\  \     |__|      \______  /___|  (____  /__|   \______  /\____/
 *          \/      \/|__|                             \/      \_/                      \/     \/     \/              \/
 *
 *  ExploitsX by Sebastian Giheta, owner of 8b8t.xyz
 * .. _____________________ ..
 */

package me.bait.exploitfixer.chatco;

import me.bait.exploitfixer.exploitfixer;
import me.bait.exploitfixer.gameplay.RegisterStats;
import me.bait.exploitfixer.util.API;
import me.bait.exploitfixer.util.CH;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.io.IOException;
import java.text.Normalizer;
import java.util.HashMap;
import java.util.List;
import java.util.function.Predicate;

public class AllChat implements Listener {
	private static final String CANCEL = "14CANCELIMMEDIATELY14712381230412A42088";
	public static HashMap<Player, Integer> vlchat = new HashMap<>();
	public static HashMap<Player, String> lastm = new HashMap<>();
	public static HashMap<Player, String> lastm2 = new HashMap<>();
	public static HashMap<Player, String> lastm3 = new HashMap<>();
	public static HashMap<Player, String> lastm4 = new HashMap<>();
	public static HashMap<Player, String> lastm5 = new HashMap<>();
	public static boolean enablecw = CH.getBoolean("enable-chat-whitelist", false);
	public static List<String> swhitelist = CH.getStringList("chat-whitelist");
	public exploitfixer plugin;

	public AllChat(exploitfixer plugin) {
		this.plugin = plugin;
	}

	public static boolean containsCaseInsensitive(String s, List<String> l) {
		for (String string : l) {
			if (string.equalsIgnoreCase(s)) {
				return true;
			}
		}
		return false;
	}

	public static int onChat(String str, Player pla) {
		int cancelled = 0;
		int bad = 0;
		int vladd = 0;
		int risk = 0;
		String[] norme = {"\\*", "`", "\\+", "!", " ", "\\^", ">", "dot", "dot", ",", "\\.", "\\)", "\\(", "\\{", "}", "_", "-", "&", "\\[", "]", "@"};
		String newm = Normalizer.normalize(str.toLowerCase(), Normalizer.Form.NFD).replace("[̀-ͯ]/g", "").toLowerCase();
		byte b;
		int i;
		String[] arrayOfString1;
		for (i = (arrayOfString1 = norme).length, b = 0; b < i; ) {
			String str1 = arrayOfString1[b];
			newm = newm.replaceAll(str1, "");
			b++;
		}
		if (CH.getBoolean("debug", false)) {
			API.println("Message from '" + pla.getName() + "' returning '" + str + "'");
			API.println("Simplified message returning as '" + newm + "'");
		}
		FileConfiguration c = exploitfixer.getPlugin().getConfig();
		if (c.contains("chat-useAI") && c.getBoolean("chat-useAI")) {
			if (c.getDouble("chat-AI-similarity") > 1.0D || c.getDouble("chat-AI-similarity") < 0.0D) {
				Bukkit.getLogger().warning("chat-AI-similarity must be a decimal between 0 and 1. AI module is not functioning... You can set chat-useAI to false to disable it.");
			} else {
				double t = c.getDouble("chat-AI-similarity");
				if (!lastm.containsKey(pla)) {
					lastm.put(pla, newm);
					lastm2.put(pla, CANCEL);
					lastm3.put(pla, CANCEL);
					lastm4.put(pla, CANCEL);
					lastm5.put(pla, CANCEL);
				} else if (!lastm2.containsKey(pla)) {
					String one = lastm.get(pla);
					lastm.put(pla, newm);
					lastm2.put(pla, one);
					lastm3.put(pla, CANCEL);
					lastm4.put(pla, CANCEL);
					lastm5.put(pla, CANCEL);
					if (Similarity.getSimilarity(lastm.get(pla), lastm2.get(pla)) >= t) {
						risk++;
					}
				} else if (!lastm3.containsKey(pla)) {
					String one = lastm.get(pla);
					String two = lastm2.get(pla);
					lastm.put(pla, newm);
					lastm2.put(pla, one);
					lastm3.put(pla, two);
					lastm4.put(pla, CANCEL);
					lastm5.put(pla, CANCEL);
					if (Similarity.getSimilarity(lastm.get(pla), lastm2.get(pla)) >= t) {
						risk++;
					}
					if (Similarity.getSimilarity(lastm.get(pla), lastm3.get(pla)) >= t) {
						risk++;
					}
				} else if (!lastm4.containsKey(pla)) {
					String one = lastm.get(pla);
					String two = lastm2.get(pla);
					String three = lastm3.get(pla);
					lastm.put(pla, newm);
					lastm2.put(pla, one);
					lastm3.put(pla, two);
					lastm4.put(pla, three);
					lastm5.put(pla, CANCEL);
					if (Similarity.getSimilarity(lastm.get(pla), lastm2.get(pla)) >= t) {
						risk++;
					}
					if (Similarity.getSimilarity(lastm.get(pla), lastm3.get(pla)) >= t) {
						risk++;
					}
					if (Similarity.getSimilarity(lastm.get(pla), lastm4.get(pla)) >= t) {
						risk++;
					}
				} else {
					String one = lastm.get(pla);
					String two = lastm2.get(pla);
					String three = lastm3.get(pla);
					String four = lastm4.get(pla);
					lastm.put(pla, newm);
					lastm2.put(pla, one);
					lastm3.put(pla, two);
					lastm4.put(pla, three);
					lastm5.put(pla, four);
					if (Similarity.getSimilarity(lastm.get(pla), lastm2.get(pla)) < t) {
						risk++;
					}
					if (Similarity.getSimilarity(lastm.get(pla), lastm3.get(pla)) < t) {
						risk++;
					}
					if (Similarity.getSimilarity(lastm.get(pla), lastm4.get(pla)) < t) {
						risk++;
					}
					if (Similarity.getSimilarity(lastm.get(pla), lastm5.get(pla)) < t) {
						risk++;
					}
				}
			}
			if (c.getBoolean("debug")) {
				String l = "OnChat risk detection from " + pla.getName() + " returning a " + risk;
				exploitfixer.getPlugin().getServer().getLogger().info(l);
			}
		}
		RegisterStats.onChat(pla);

		if (c.getBoolean("chatfilter")) {
			if (c.getBoolean("debug")) {
				String l = "OnChat detected from " + pla.getName();
				exploitfixer.getPlugin().getServer().getLogger().info(l);
			}
			if (risk >= 2) {
				if (vlchat.containsKey(pla)) {
					vladd = vlchat.get(pla);
				}
				vladd++;
				vlchat.put(pla, vladd);
			}
			if (containsCaseInsensitive(pla.getName(), c.getStringList("chat-exempt"))) {
				cancelled = 1;
			}
			if (cancelled == 1) {
				return 0;
			}

			for (String r : c.getStringList("blacklisted-words")) {
				if (str.toLowerCase().contains(r)) {
					if (c.getBoolean("debug") || c.getBoolean("log-flags")) {
						String l = "OnChat detected flag: '" + r + "' from: '" + pla + "' in message '" + str + "'";
						Bukkit.getLogger().info(l);
					}
					if (vlchat.containsKey(pla)) {
						vladd = vlchat.get(pla);
					}
					vladd += c.getInt("blacklist-vladd");
					bad = 1;
					vlchat.put(pla, vladd);
					return 1;
				}
			}
			for (String s : CH.getStringList("red-flag-words")) {
				if (str.toLowerCase().contains(s)) {
					if (c.getBoolean("debug") || c.getBoolean("log-flags")) {
						String l = "OnChat detected flag: '" + s + "' from: '" + pla + "' in message '" + str + "'";
						Bukkit.getLogger().info(l);
					}
					if (vlchat.containsKey(pla)) {
						vladd = vlchat.get(pla);
					}
					vladd++;
					vlchat.put(pla, vladd);
				}
			}
			int skip = 1;
			for (String s : swhitelist) {
				if (str.toLowerCase().contains(s)) {
					skip = 0;
					break;
				}
			}
			if (skip == 1) {
				if (vlchat.containsKey(pla)) {
					vladd = vlchat.get(pla);
				}
				vladd++;
				vlchat.put(pla, vladd);
				Bukkit.getLogger().info("ExploitsX > Detected a message from " + pla + " that is not in the english lexicon / in the whitelist. Their message: " + str);
			}
			if (!vlchat.containsKey(pla)) {
				if (c.getBoolean("debug")) API.println("no vlmap found for " + pla);
				vlchat.put(pla, 0);
			}
			if (vlchat.get(pla) >= c.getInt("cancel-point")) {
				if (vlchat.get(pla) >= c.getInt("tipping-point")) {
					if (c.getBoolean("debug")) {
						String l = "OnChat doesn't like " + pla.getName();
						exploitfixer.getPlugin().getServer().getLogger().info(l);
					}
					pla.sendMessage(
							ChatColor.translateAlternateColorCodes('&', c.getString("antibot-message")));
					API.sendPlayerToServer(pla, c.getString("antibot-server"));
					if (vlchat.get(pla) >= c.getInt("kick-point"))
						API.kickPlayer(pla, ChatColor.translateAlternateColorCodes('&', c.getString("antibot-message")));
				}
				bad = 1;
				return 1;
			}
			if (vlchat.containsKey(pla) && bad == 0) {
				if (c.getBoolean("debug")) {
					String l = "OnChat detected kind regular message from " + pla.getName();
					exploitfixer.getPlugin().getServer().getLogger().info(l);
				}
				vladd = vlchat.get(pla).intValue();
				vladd--;
				vlchat.put(pla, Integer.valueOf(vladd));
				if (vlchat.get(pla).intValue() >= c.getInt("cancel-point")) {
					pla.sendMessage(ChatColor.translateAlternateColorCodes('&', c.getString("antibot-message")));
					return 1;
				}
				if (vlchat.get(pla).intValue() == 0)
					vlchat.remove(pla);
			}
			return 0;
		}
		return 0;
	}

	public static void readConfig(int change) {
		FileConfiguration c = exploitfixer.getPlugin().getConfig();
		if (change == 3)
			c.set("ChatCo.SpoilersEnabled", true);
		if (change == 4)
			c.set("ChatCo.SpoilersEnabled", false);
		if (change == 5)
			c.set("ChatCo.WhisperChangesEnabled", true);
		if (change == 6)
			c.set("ChatCo.WhisperChangesEnabled", false);
		if (change == 7)
			c.set("ChatCo.NewCommands", true);
		if (change == 8)
			c.set("ChatCo.NewCommands", false);
		if (change == 9)
			c.set("ChatCo.WhisperLog", true);
		if (change == 10)
			c.set("ChatCo.WhisperLog", false);
		exploitfixer.getPlugin().saveConfig();
		exploitfixer.getPlugin().reloadConfig();
	}

	public static void reload() {
		enablecw = CH.getBoolean("enable-chat-whitelist", false);
		swhitelist = CH.getStringList("chat-whitelist");
	}

	public String ColorCodeManager(String data, Player player) {
		FileConfiguration c = this.plugin.getConfig();
		if (!c.getString("ChatCo.ChatColors.White").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.White"),
					ChatColor.WHITE.toString());
		if (!c.getString("ChatCo.ChatColors.Red").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Red"), ChatColor.RED.toString());
		if (!c.getString("ChatCo.ChatColors.Black").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Black"),
					ChatColor.BLACK.toString());
		if (!c.getString("ChatCo.ChatColors.Dark_Red").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Dark_Red"),
					ChatColor.DARK_RED.toString());
		if (!c.getString("ChatCo.ChatColors.Dark_Gray").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Dark_Gray"),
					ChatColor.DARK_GRAY.toString());
		if (!c.getString("ChatCo.ChatColors.Dark_Blue").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Dark_Blue"),
					ChatColor.DARK_BLUE.toString());
		if (!c.getString("ChatCo.ChatColors.Dark_Purple").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Dark_Purple"),
					ChatColor.DARK_PURPLE.toString());
		if (!c.getString("ChatCo.ChatColors.Blue").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Blue"), ChatColor.BLUE.toString());
		if (!c.getString("ChatCo.ChatColors.Light_Purple").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Light_Purple"),
					ChatColor.LIGHT_PURPLE.toString());
		if (!c.getString("ChatCo.ChatColors.Dark_Green").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Dark_Green"),
					ChatColor.DARK_GREEN.toString());
		if (!c.getString("ChatCo.ChatColors.Gold").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Gold"), ChatColor.GOLD.toString());
		if (!c.getString("ChatCo.ChatColors.Green").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Green"),
					ChatColor.GREEN.toString());
		if (!c.getString("ChatCo.ChatColors.Yellow").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Yellow"),
					ChatColor.YELLOW.toString());
		if (!c.getString("ChatCo.ChatColors.Dark_Aqua").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Dark_Aqua"),
					ChatColor.DARK_AQUA.toString());
		if (!c.getString("ChatCo.ChatColors.Aqua").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Aqua"), ChatColor.AQUA.toString());
		if (!c.getString("ChatCo.ChatColors.Gray").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Gray"), ChatColor.GRAY.toString());
		if (!c.getString("ChatCo.ChatColors.Bold").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Bold"), ChatColor.BOLD.toString());
		if (!c.getString("ChatCo.ChatColors.Italic").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Italic"),
					ChatColor.ITALIC.toString());
		if (!c.getString("ChatCo.ChatColors.Underline").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Underline"),
					ChatColor.UNDERLINE.toString());
		if (!c.getString("ChatCo.ChatColors.Strikethrough").equals("!#"))
			data = data.replace(c.getString("ChatCo.ChatColors.Strikethrough"),
					ChatColor.STRIKETHROUGH.toString());
		if (data.length() == 2 && (data.contains(ChatColor.WHITE.toString()) || data.contains(ChatColor.RED.toString()) ||
				data.contains(ChatColor.BLACK.toString()) || data.contains(ChatColor.DARK_RED.toString()) ||
				data.contains(ChatColor.DARK_GRAY.toString()) || data.contains(ChatColor.DARK_BLUE.toString()) ||
				data.contains(ChatColor.DARK_PURPLE.toString()) || data.contains(ChatColor.BLUE.toString()) ||
				data.contains(ChatColor.LIGHT_PURPLE.toString()) || data.contains(ChatColor.DARK_GREEN.toString()) ||
				data.contains(ChatColor.GOLD.toString()) || data.contains(ChatColor.GREEN.toString()) ||
				data.contains(ChatColor.YELLOW.toString()) || data.contains(ChatColor.DARK_AQUA.toString()) ||
				data.contains(ChatColor.AQUA.toString()) || data.contains(ChatColor.GRAY.toString()) ||
				data.contains(ChatColor.BOLD.toString()) || data.contains(ChatColor.ITALIC.toString()) ||
				data.contains(ChatColor.UNDERLINE.toString()) || data.contains(ChatColor.STRIKETHROUGH.toString())))
			return CANCEL;
		return data;
	}

	public String ColorManager(String msg, Player player) {
		FileConfiguration c = this.plugin.getConfig();
		if (!c.getString("ChatCo.ChatPrefixes.Green").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Green")))
			msg = ChatColor.GREEN.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Blue").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Blue")))
			msg = ChatColor.BLUE.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Red").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Red")))
			msg = ChatColor.RED.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Aqua").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Aqua")))
			msg = ChatColor.AQUA.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Gold").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Gold")))
			msg = ChatColor.GOLD.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Yellow").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Yellow")))
			msg = ChatColor.YELLOW.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Gray").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Gray")))
			msg = ChatColor.GRAY.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Black").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Black")))
			msg = ChatColor.BLACK.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Dark_Green").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Dark_Green")))
			msg = ChatColor.DARK_GREEN.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Dark_Red").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Dark_Red")))
			msg = ChatColor.DARK_RED.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Dark_Gray").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Dark_Gray")))
			msg = ChatColor.DARK_GRAY.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Dark_Blue").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Dark_Blue")))
			msg = ChatColor.DARK_BLUE.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Dark_Aqua").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Dark_Aqua")))
			msg = ChatColor.DARK_AQUA.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Dark_Purple").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Dark_Purple")))
			msg = ChatColor.DARK_PURPLE.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Light_Purple").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Light_Purple")))
			msg = ChatColor.LIGHT_PURPLE.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Underline").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Underline")))
			msg = ChatColor.UNDERLINE.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Italic").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Italic")))
			msg = ChatColor.ITALIC.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Bold").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Bold")))
			msg = ChatColor.BOLD.toString() + msg;
		if (!c.getString("ChatCo.ChatPrefixes.Strikethrough").equals("!#") &&
				msg.startsWith(c.getString("ChatCo.ChatPrefixes.Strikethrough")))
			msg = ChatColor.STRIKETHROUGH.toString() + msg;
		return msg;
	}

	@EventHandler
	public void onPlayerChat(AsyncPlayerChatEvent event) throws IOException {
		if (onChat(event.getMessage(), event.getPlayer()) == 1) {
			if (exploitfixer.getPlugin().getConfig().getBoolean("debug")) {
				String l = "AllChat detected cancelled message from " + event.getPlayer();
				exploitfixer.getPlugin().getServer().getLogger().info(l);
			}
			event.setCancelled(true);
			return;
		}
		if (event.isCancelled())
			return;
		Player player = event.getPlayer();
		Player[] recipients = event.getRecipients().toArray(new Player[0]);
		CCPlayer cp = null;
		for (Player recipient : recipients) {
			try {
				cp = this.plugin.getCCPlayer(recipient);
			} catch (IOException e) {
				e.printStackTrace();
			}
			if ((cp.chatDisabled && this.plugin.checkForChatDisable) || (cp.isIgnored(player.getName()) && this.plugin.checkForIgnores))
				event.getRecipients().remove(recipient);
		}
		String msg = ColorManager(event.getMessage(), player);
		msg = ColorCodeManager(msg, player);
		if (!msg.contentEquals(CANCEL)) {
			Player[] players = event.getRecipients().toArray(new Player[0]);
			JSONMessage.create("<" + player.getDisplayName() + ChatColor.RESET + "> " + msg).suggestCommand("/w " + player.getName()).send(players);
		}
		event.setCancelled(true);
	}

	@EventHandler
	public void onPlayerQuit(final PlayerQuitEvent e) {
		exploitfixer.playerlist.removeIf(new Predicate<CCPlayer>() {
			public boolean test(CCPlayer t) {
				return t.player.equals(e.getPlayer());
			}
		});
		if (exploitfixer.getPlugin().getConfig().getBoolean("leave-clear"))
			vlchat.remove(e.getPlayer());
	}
}
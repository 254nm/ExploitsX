/*
 * .. _____________________ ..
 *  -- // WARNING \\ --
 *  -- THIS WORK IS UNDER EXCLUSIVE COPRIGHT FOR BAITCORP LABS. DISTRIBUTION, MODIFICATION, SELLING, OR SHARING WITHOUT EXPLICIT PERMISSION FROM BAITCORP LABS IS STRICTLY PROHIBITED.
 *  -- THIS PROGRAM IS LICENSED FOR MODIFICATION TO AND ONLY TO: "BAITCORP LABS" [FR], "CCHOST PARIS" [FR].
 *  --
 *  -- ExploitsX Sebastian Giheta 2019-2020
 * .. _____________________ ..
 *
 * .. _____________________ ..
 *  ___________              .__         .__  __         ____  ___              _________ .__            __   _________
 *  \_   _____/__  _________ |  |   ____ |__|/  |_  _____\   \/  /     .__      \_   ___ \|  |__ _____ _/  |_ \_   ___ \  ____
 *   |    __)_\  \/  /\____ \|  |  /  _ \|  \   __\/  ___/\     /    __|  |___  /    \  \/|  |  \\__  \\   __\/    \  \/ /  _ \
 *   |        \>    < |  |_> >  |_(  <_> )  ||  |  \___ \ /     \   /__    __/  \     \___|   Y  \/ __ \|  |  \     \___(  <_> )
 *  /_______  /__/\_ \|   __/|____/\____/|__||__| /____  >___/\  \     |__|      \______  /___|  (____  /__|   \______  /\____/
 *          \/      \/|__|                             \/      \_/                      \/     \/     \/              \/
 *
 *  ExploitsX by Sebastian Giheta, owner of 8b8t.xyz
 * .. _____________________ ..
 */

package me.bait.exploitfixer.gameplay;

import me.bait.exploitfixer.exploitfixer;
import me.bait.exploitfixer.util.API;
import me.clip.placeholderapi.expansion.PlaceholderExpansion;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;

import java.math.BigDecimal;
import java.math.RoundingMode;

public class Placeholder extends PlaceholderExpansion {

	public static double round(double value, int places) {
		if (places < 0)
			throw new IllegalArgumentException();
		BigDecimal bd = new BigDecimal(value);
		bd = bd.setScale(places, RoundingMode.HALF_UP);
		return bd.doubleValue();

	}

	public String getAuthor() {
		return "baitcorp";
	}

	public String getIdentifier() {
		return "ef";

	}

	public String getVersion() {
		return exploitfixer.getPlugin().getDescription().getVersion();

	}

	public String onPlaceholderRequest(Player p, String identifier) {
		if (identifier.equals("tps")) {
			double TPS = API.getTps();
			double intTPS = round(TPS, 2);
			if (intTPS > 19.5D) {
				return "§a20.0*";
			}
			if (intTPS <= 19.5D && intTPS > 15.0D) {
				return "§a" + intTPS;
			}
			if (intTPS <= 19.5D && intTPS <= 15.0D && intTPS > 12.0D) {
				return "§e" + intTPS;
			}
			if (intTPS <= 19.5D && intTPS <= 15.0D && intTPS <= 12.0D && intTPS > 6.0D) {
				return "§c" + intTPS;
			}
			if (intTPS <= 19.5D && intTPS <= 15.0D && intTPS <= 12.0D && intTPS <= 6.0D) {
				return "§4" + intTPS;
			}

		}
		if (identifier.equals("online")) {
			int players = Bukkit.getServer().getOnlinePlayers().size();
			return String.valueOf(players);

		}
		if (identifier.equals("uptime")) {
			return String.valueOf(API.GetFormattedInterval(API.timeseconds));
		}
		if (p == null)
			return "";
		return null;
	}
}
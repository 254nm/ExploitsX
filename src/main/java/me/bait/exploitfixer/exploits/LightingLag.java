/*
 * .. _____________________ ..
 *  -- // WARNING \\ --
 *  -- THIS WORK IS UNDER EXCLUSIVE COPRIGHT FOR BAITCORP LABS. DISTRIBUTION, MODIFICATION, SELLING, OR SHARING WITHOUT EXPLICIT PERMISSION FROM BAITCORP LABS IS STRICTLY PROHIBITED.
 *  -- THIS PROGRAM IS LICENSED FOR MODIFICATION TO AND ONLY TO: "BAITCORP LABS" [FR], "CCHOST PARIS" [FR].
 *  --
 *  -- ExploitsX Sebastian Giheta 2019-2020
 * .. _____________________ ..
 *
 * .. _____________________ ..
 *  ___________              .__         .__  __         ____  ___              _________ .__            __   _________
 *  \_   _____/__  _________ |  |   ____ |__|/  |_  _____\   \/  /     .__      \_   ___ \|  |__ _____ _/  |_ \_   ___ \  ____
 *   |    __)_\  \/  /\____ \|  |  /  _ \|  \   __\/  ___/\     /    __|  |___  /    \  \/|  |  \\__  \\   __\/    \  \/ /  _ \
 *   |        \>    < |  |_> >  |_(  <_> )  ||  |  \___ \ /     \   /__    __/  \     \___|   Y  \/ __ \|  |  \     \___(  <_> )
 *  /_______  /__/\_ \|   __/|____/\____/|__||__| /____  >___/\  \     |__|      \______  /___|  (____  /__|   \______  /\____/
 *          \/      \/|__|                             \/      \_/                      \/     \/     \/              \/
 *
 *  ExploitsX by Sebastian Giheta, owner of 8b8t.xyz
 * .. _____________________ ..
 */

package me.bait.exploitfixer.exploits;

import me.bait.exploitfixer.exploitfixer;
import me.bait.exploitfixer.util.API;
import me.bait.exploitfixer.util.TPS;
import me.bait.exploitfixer.util.ViolationUtils;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPistonExtendEvent;
import org.bukkit.event.block.BlockPistonRetractEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.scheduler.BukkitRunnable;


public class LightingLag implements Listener {
	static ViolationUtils breakMan = new ViolationUtils();

	public static void begin() {
		breakMan.begin();
	}

	@EventHandler
	public void onbreak(BlockBreakEvent event) {
		if (exploitfixer.getPlugin().getConfig().getBoolean("patch-efficiency") && event.getPlayer().getItemInHand().getEnchantments() != null && event.getPlayer().getItemInHand().getEnchantments().containsKey(Enchantment.DIG_SPEED) && event.getPlayer().getItemInHand().getEnchantmentLevel(Enchantment.DIG_SPEED) >= 5) {
			event.getPlayer().getItemInHand().removeEnchantment(Enchantment.DIG_SPEED);
			event.getPlayer().getItemInHand().addEnchantment(Enchantment.DIG_SPEED, 5);
		}

		final Player player = event.getPlayer();
		int x = event.getBlock().getLocation().getBlockX();
		int y = event.getBlock().getLocation().getBlockY();
		int z = event.getBlock().getLocation().getBlockZ();
		if (event.getBlock().getWorld().getBlockAt(new Location(event.getBlock().getWorld(), x, (y - 1), z)).getType() == Material.AIR) {
			if (exploitfixer.getPlugin().getConfig().getBoolean("check-surroundings") && breakMan.vlMapContainsPlayer(player) && breakMan.getVls(player) > 4) {
				if (event.getBlock().getWorld().getBlockAt(new Location(event.getBlock().getWorld(), (x - 1), y, z)).getType() == Material.AIR)
					return;
				if (event.getBlock().getWorld().getBlockAt(new Location(event.getBlock().getWorld(), (x + 1), y, z)).getType() == Material.AIR)
					return;
				if (event.getBlock().getWorld().getBlockAt(new Location(event.getBlock().getWorld(), x, y, (z - 1))).getType() == Material.AIR)
					return;
				if (event.getBlock().getWorld().getBlockAt(new Location(event.getBlock().getWorld(), x, y, (z + 1))).getType() == Material.AIR) {
					return;
				}
			}

			breakMan.addVls(player, 1);
			(new BukkitRunnable() {
				public void run() {
					if (player.isOnline()) {
						if (LightingLag.breakMan.vlMapContainsPlayer(player)) {
							if (LightingLag.breakMan.getVls(player) > 1) {
								LightingLag.breakMan.removeVL(player);
							}
							if (LightingLag.breakMan.getVls(player) < 2) {
								LightingLag.breakMan.resetVls(player);
							}
						}
					} else {
						LightingLag.breakMan.resetVls(player);
					}
				}
			}).runTaskLater(exploitfixer.getPlugin(), 100L);
			if (breakMan.getVls(player) == 15) {
				API.sendMessage(player, API.getPrefix() + " > &6Please slow down or you will be kicked");
			}
			if (breakMan.getVls(player) == 25) {
				API.sendMessage(player, API.getPrefix() + " > &6Slow down your light-intensive block breaking.");
			}
			if (breakMan.getVls(player) > 30) {
				event.setCancelled(true);
			}
			if (breakMan.getVls(player) >= 35) {
				API.kickPlayer(player, API.getPrefix() + " > &6LightLag has been disabled, sorry ): (" + breakMan.getVls(player) + "vls)");
				API.alertMessage(API.getPrefix() + "&c " + player.getName() + "> &r&6Has been kicked for lightlag (" + breakMan.getVls(player) + "vls)");
				breakMan.resetVls(player);
			}
		}
	}

	@EventHandler
	public void onPistonEvent(BlockPistonRetractEvent e) {
		if (TPS.getTPS() <= exploitfixer.getPlugin().getConfig().getDouble("pistonint")) {
			e.setCancelled(true);
		}
		if (exploitfixer.getPlugin().getConfig().getBoolean("skylight") && e.getBlock().getY() > exploitfixer.getPlugin().getConfig().getInt("ylevel") && exploitfixer.getPlugin().getConfig().getBoolean("patch-piston")) {
			e.setCancelled(true);
		}
	}


	@EventHandler
	public void onPistonEvent2(BlockPistonExtendEvent e) {
		if (TPS.getTPS() <= exploitfixer.getPlugin().getConfig().getDouble("pistonint")) {
			e.setCancelled(true);
		}
		if (exploitfixer.getPlugin().getConfig().getBoolean("skylight") && e.getBlock().getY() > exploitfixer.getPlugin().getConfig().getInt("ylevel") && exploitfixer.getPlugin().getConfig().getBoolean("patch-piston")) {
			e.setCancelled(true);
		}
	}

	@EventHandler
	public void onplace(BlockPlaceEvent event) {
		final Player player = event.getPlayer();
		int x = event.getBlock().getLocation().getBlockX();
		int y = event.getBlock().getLocation().getBlockY();
		int z = event.getBlock().getLocation().getBlockZ();
		if (event.getBlock().getWorld().getBlockAt(new Location(event.getBlock().getWorld(), x, (y - 1), z)).getType() == Material.AIR) {
			if (exploitfixer.getPlugin().getConfig().getBoolean("check-surroundings") && breakMan.vlMapContainsPlayer(player) && breakMan.getVls(player) > 4) {
				if (event.getBlock().getWorld().getBlockAt(new Location(event.getBlock().getWorld(), (x - 1), y, z)).getType() == Material.AIR)
					return;
				if (event.getBlock().getWorld().getBlockAt(new Location(event.getBlock().getWorld(), (x + 1), y, z)).getType() == Material.AIR)
					return;
				if (event.getBlock().getWorld().getBlockAt(new Location(event.getBlock().getWorld(), x, y, (z - 1))).getType() == Material.AIR)
					return;
				if (event.getBlock().getWorld().getBlockAt(new Location(event.getBlock().getWorld(), x, y, (z + 1))).getType() == Material.AIR) {
					return;
				}
			}
			breakMan.addVls(player, 1);
			if (breakMan.getVls(player) == 15) {
				event.setCancelled(true);
				API.sendMessage(player, API.getPrefix() + " > &6Please slow down or you will be kicked");
			}
			if (breakMan.getVls(player) == 25) {
				API.sendMessage(player, API.getPrefix() + " > &6Slow down your light-intensive block breaking.");
			}
			if (breakMan.getVls(player) > 30) {
				event.setCancelled(true);
			}
			if (breakMan.getVls(player) >= 35) {
				API.kickPlayer(player, API.getPrefix() + " > &6LightLag has been disabled, sorry ): (" + breakMan.getVls(player) + "vls)");
				API.alertMessage(API.getPrefix() + "&c " + player.getName() + "> &r&6Has been kicked for lightlag (" + breakMan.getVls(player) + "vls)");
				breakMan.resetVls(player);
			}
			(new BukkitRunnable() {
				public void run() {
					if (player.isOnline()) {
						if (LightingLag.breakMan.vlMapContainsPlayer(player)) {
							if (LightingLag.breakMan.getVls(player) > 1) {
								LightingLag.breakMan.removeVL(player);
							}
							if (LightingLag.breakMan.getVls(player) < 2) {
								LightingLag.breakMan.resetVls(player);
							}
						}
					} else {
						LightingLag.breakMan.resetVls(player);
					}
				}
			}).runTaskLater(exploitfixer.getPlugin(), 100L);
		}
	}
}
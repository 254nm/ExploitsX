/*
 * .. _____________________ ..
 *  -- // WARNING \\ --
 *  -- THIS WORK IS UNDER EXCLUSIVE COPRIGHT FOR BAITCORP LABS. DISTRIBUTION, MODIFICATION, SELLING, OR SHARING WITHOUT EXPLICIT PERMISSION FROM BAITCORP LABS IS STRICTLY PROHIBITED.
 *  -- THIS PROGRAM IS LICENSED FOR MODIFICATION TO AND ONLY TO: "BAITCORP LABS" [FR], "CCHOST PARIS" [FR].
 *  --
 *  -- ExploitsX Sebastian Giheta 2019-2020
 * .. _____________________ ..
 *
 * .. _____________________ ..
 *  ___________              .__         .__  __         ____  ___              _________ .__            __   _________
 *  \_   _____/__  _________ |  |   ____ |__|/  |_  _____\   \/  /     .__      \_   ___ \|  |__ _____ _/  |_ \_   ___ \  ____
 *   |    __)_\  \/  /\____ \|  |  /  _ \|  \   __\/  ___/\     /    __|  |___  /    \  \/|  |  \\__  \\   __\/    \  \/ /  _ \
 *   |        \>    < |  |_> >  |_(  <_> )  ||  |  \___ \ /     \   /__    __/  \     \___|   Y  \/ __ \|  |  \     \___(  <_> )
 *  /_______  /__/\_ \|   __/|____/\____/|__||__| /____  >___/\  \     |__|      \______  /___|  (____  /__|   \______  /\____/
 *          \/      \/|__|                             \/      \_/                      \/     \/     \/              \/
 *
 *  ExploitsX by Sebastian Giheta, owner of 8b8t.xyz
 * .. _____________________ ..
 */

package me.bait.exploitfixer.exploits;

import me.bait.exploitfixer.exploitfixer;
import me.bait.exploitfixer.util.API;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.block.ShulkerBox;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockDispenseEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerSwapHandItemsEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.HashMap;


public class Offhand implements Listener {
	static String print = "Removed illegal from player: ";

	static FileConfiguration c = exploitfixer.getPlugin().getConfig();
	static String re = "removeeggs";
	public HashMap<Player, Integer> vl2 = new HashMap<>();
	int bookamt = 0;

	public static void clearfunc() {
		for (Player subj : Bukkit.getOnlinePlayers()) {
			byte b;
			int i;
			ItemStack[] arrayOfItemStack;
			for (i = (arrayOfItemStack = subj.getInventory().getArmorContents()).length, b = 0; b < i; ) {
				ItemStack item = arrayOfItemStack[b];
				if (item != null) {
					if ((item.getType() == Material.MONSTER_EGG || item.getType() == Material.MONSTER_EGGS) && c.getBoolean(re)) {
						item.setAmount(0);
					}
					ItemMeta meta = item.getItemMeta();
					for (String s : c.getStringList("lore-list")) {
						if (meta.getLore() != null && !meta.getLore().isEmpty())
							for (String f : meta.getLore()) {
								if (s.equals(f) || s.equals("xInf[]")) {
									item.setAmount(0);
									subj.damage(10.0D);
									API.println(print + subj.getName());
								}
							}
					}
				}
				b++;
			}
		}
	}

	public static void reload() {
		c = exploitfixer.getPlugin().getConfig();
	}

	@EventHandler
	public void itemDrop(PlayerDropItemEvent e) {
		Player player = e.getPlayer();
		byte b;
		int i;
		ItemStack[] arrayOfItemStack;
		for (i = (arrayOfItemStack = player.getInventory().getContents()).length, b = 0; b < i; ) {
			ItemStack item = arrayOfItemStack[b];
			if (item != null && item.getType() != null) {
				if ((item.getType().toString().equals("MONSTER_EGG") || item.getType().toString().equals("MONSTER_EGGS")) && c.getBoolean(re)) {
					item.setAmount(0);
				}
				if (API.isShulkerBox(item.getType())) {
					BlockStateMeta meta = (BlockStateMeta) item.getItemMeta();
					if (meta == null) return;
					ShulkerBox box = (ShulkerBox) meta.getBlockState();
					if (box == null) return;
					this.bookamt = 0;
					byte b1;
					int j;
					ItemStack[] arrayOfItemStack1;
					for (j = (arrayOfItemStack1 = box.getInventory().getContents()).length, b1 = 0; b1 < j; ) {
						ItemStack itemStack = arrayOfItemStack1[b1];
						if (itemStack != null) {
							if ((itemStack.getType() == Material.MONSTER_EGG || itemStack.getType() == Material.MONSTER_EGGS) && c.getBoolean(re)) {
								itemStack.setAmount(0);
							}

							if (itemStack.getType() == Material.WRITTEN_BOOK || itemStack.getType() == Material.BOOK_AND_QUILL) {
								this.bookamt++;
								if (this.bookamt > 50) {
									item.setAmount(0);
									player.sendMessage(ChatColor.DARK_RED + "ExploitsX > Potential Book bans cleared.");
								}
							}
						}
						b1++;
					}

					meta.setBlockState(box);
					item.setItemMeta(meta);
				}
				if (c.getBoolean("itemrestriction")) {
					ItemMeta meta = item.getItemMeta();
					int remove = 0;
					if (c.getStringList("lore-list") != null &&
							!c.getStringList("lore-list").isEmpty() &&
							c.getStringList("exempt-list") != null &&

							!c.getStringList("exempt-list").isEmpty()) {
						for (String p : c.getStringList("exempt-list")) {
							if (e.getPlayer().getName().equalsIgnoreCase(p)) {
								remove = 1;
							}
						}
						if (remove == 0) {
							for (String s : c.getStringList("lore-list")) {
								if (meta.getLore() != null && !meta.getLore().isEmpty()) {
									for (String f : meta.getLore()) {
										if (s.equals(f) || s.equals("xInf[]")) {
											item.setAmount(0);
											API.println(print + e.getPlayer().getName());
										}
									}
								}
							}
						}
					}
					if (c.getStringList("limited-items") != null &&
							!c.getStringList("limited-items").isEmpty()) {
						for (String s : c.getStringList("limited-items")) {
							if (item != null && s.equals(item.getType().toString()) &&
									item.getAmount() > c.getInt("maxstacksize")) {
								item.setAmount(c.getInt("maxstacksize"));
							}
						}
					}
				}
			}
			b++;
		}

	}

	@EventHandler
	public void onClick(InventoryClickEvent e) {
		if (c.getBoolean("itemrestriction")) {
			byte b;
			int i;
			ItemStack[] arrayOfItemStack;
			for (i = (arrayOfItemStack = e.getWhoClicked().getInventory().getContents()).length, b = 0; b < i; ) {
				ItemStack itemStack = arrayOfItemStack[b];
				if (itemStack != null && itemStack.getType() != null) {
					if ((itemStack.getType().toString().equals("MONSTER_EGG") || itemStack.getType().toString().equals("MONSTER_EGGS")) &&
							c.getBoolean(re)) {
						itemStack.setAmount(0);
					}

					int remove = 0;
					if (c.getStringList("lore-list") != null &&
							!c.getStringList("lore-list").isEmpty() &&
							c.getStringList("exempt-list") != null &&

							!c.getStringList("exempt-list").isEmpty()) {
						for (String p : c.getStringList("exempt-list")) {
							if (e.getWhoClicked().getName().equalsIgnoreCase(p)) {
								remove = 1;
							}
						}
						ItemMeta meta = itemStack.getItemMeta();
						if (remove == 0) {
							for (String s : c.getStringList("lore-list")) {
								if (meta.getLore() != null && !meta.getLore().isEmpty()) {
									for (String f : meta.getLore()) {
										if (s.equals(f) || s.equals("xInf[]")) {
											itemStack.setAmount(0);
											API.println(
													print + e.getWhoClicked().getName());
										}
									}
								}
							}
						}
					}
					if (c.getStringList("limited-items") != null &&
							!c.getStringList("limited-items").isEmpty()) {
						for (String s : c.getStringList("limited-items")) {
							if (s.equals(itemStack.getType().toString()) &&
									itemStack.getAmount() > c.getInt("maxstacksize")) {
								itemStack.setAmount(c.getInt("maxstacksize"));
							}
						}
					}
				}
				b++;
			}

			ItemStack item = e.getWhoClicked().getInventory().getItemInOffHand();
			for (String s : c.getStringList("limited-items")) {
				if (s.equals(item.getType().toString()) && item.getAmount() > c.getInt("maxstacksize")) {
					item.setAmount(c.getInt("maxstacksize"));
				}
			}
		}
	}

	@EventHandler
	public void onDispense(BlockDispenseEvent e) {
		ItemStack i = e.getItem();
		if ((i.getType().toString().equals("MONSTER_EGG") || i.getType().toString().equals("MONSTER_EGGS")) &&
				c.getBoolean(re)) {
			Material t = e.getBlock().getType();
			e.setCancelled(true);
			i.setAmount(0);
			if (t != Material.BEDROCK || t != Material.END_GATEWAY || t != Material.ENDER_PORTAL_FRAME || t != Material.ENDER_PORTAL) {
				e.getBlock().setType(Material.STONE);
			}
		}
	}

	@EventHandler
	public void onPickup(final PlayerAttemptPickupItemEvent e) {
		if (c.isBoolean("pickupcheck") && !c.getBoolean("pickupcheck"))
			return;
		Player player = e.getPlayer();
		ItemStack item = e.getItem().getItemStack();
		if (item != null && item.getType() != null) {
			if ((item.getType().toString().equals("MONSTER_EGG") || item.getType().toString().equals("MONSTER_EGGS")) &&
					c.getBoolean(re)) {
				item.setAmount(0);
			}

			if (API.isShulkerBox(item.getType())) {
				BlockStateMeta meta = (BlockStateMeta) item.getItemMeta();
				if (meta == null)
					return;
				ShulkerBox box = (ShulkerBox) meta.getBlockState();
				if (box == null)
					return;
				bookamt = 0;
				byte b;
				int i;
				ItemStack[] arrayOfItemStack;
				for (i = (arrayOfItemStack = box.getInventory().getContents()).length, b = 0; b < i; ) {
					ItemStack itemStack = arrayOfItemStack[b];
					if (itemStack != null) {
						if ((itemStack.getType().toString().equals("MONSTER_EGG") || itemStack.getType().toString().equals("MONSTER_EGGS")) &&
								c.getBoolean(re)) {
							itemStack.setAmount(0);
						}

						if (!c.getBoolean("enableantibookban"))
							return;
						if (itemStack.getType() == Material.WRITTEN_BOOK || itemStack.getType() == Material.BOOK_AND_QUILL) {
							this.bookamt++;
							if (this.bookamt > 15) {
								if (c.getBoolean("cancelpickup")) {
									e.setCancelled(true);
								}
								if (this.vl2.containsKey(player) && vl2.get(player) < 1) {
									player.sendMessage(ChatColor.DARK_RED + "ExploitsX > Potential Ban Shulker!");
									this.vl2.put(player, 1);
									Bukkit.getScheduler().runTaskLaterAsynchronously(exploitfixer.getPlugin(), () -> Offhand.this.vl2.put(e.getPlayer(), 0), 60L);
								}
							}
						}
					}
					b++;
				}
				meta.setBlockState(box);
				item.setItemMeta(meta);
			}
			ItemStack item2 = e.getPlayer().getInventory().getItemInOffHand();
			for (String s : c.getStringList("limited-items")) {
				if (item2 != null && s.equals(item2.getType().toString()) && item2.getAmount() > c.getInt("maxstacksize")) {
					item2.setAmount(c.getInt("maxstacksize"));
				}
			}
		}
	}

	@EventHandler
	public void Swap(PlayerSwapHandItemsEvent e) {
		Player player = e.getPlayer();
		byte b;
		int i;
		ItemStack[] arrayOfItemStack;
		for (i = (arrayOfItemStack = player.getInventory().getContents()).length, b = 0; b < i; ) {
			ItemStack itemStack = arrayOfItemStack[b];
			if (itemStack != null && itemStack.getType() != null) {
				if ((itemStack.getType().toString().equals("MONSTER_EGG") || itemStack.getType().toString().equals("MONSTER_EGGS")) && c.getBoolean("removeeggs")) {
					itemStack.setAmount(0);
				}
				if (API.isShulkerBox(itemStack.getType())) {
					BlockStateMeta meta = (BlockStateMeta) itemStack.getItemMeta();
					if (meta == null)
						return;
					ShulkerBox box = (ShulkerBox) meta.getBlockState();
					if (box == null) return;
					bookamt = 0;
					byte b1;
					int j;
					ItemStack[] arrayOfItemStack1;
					for (j = (arrayOfItemStack1 = box.getInventory().getContents()).length, b1 = 0; b1 < j; ) {
						ItemStack itemStack1 = arrayOfItemStack1[b1];
						if (itemStack1 != null) {
							if ((itemStack1.getType().toString().equals("MONSTER_EGG") || itemStack1.getType().toString().equals("MONSTER_EGGS")) && c.getBoolean("removeeggs")) {
								itemStack1.setAmount(0);
							}
							if (!c.getBoolean("enableantibookban"))
								return;
							if (itemStack1.getType() == Material.WRITTEN_BOOK || itemStack1.getType() == Material.BOOK_AND_QUILL) {
								bookamt++;
								if (bookamt > 50) {
									itemStack.setAmount(0);
									player.sendMessage(ChatColor.DARK_RED + "ExploitsX > Potential Book bans cleared.");
								}
							}
						}
						b1++;
					}
					meta.setBlockState(box);
					itemStack.setItemMeta(meta);
				}
				if (c.getBoolean("itemrestriction")) {
					ItemMeta meta = itemStack.getItemMeta();
					int remove = 0;
					if (c.getStringList("lore-list") != null &&
							!c.getStringList("lore-list").isEmpty() &&
							c.getStringList("exempt-list") != null &&

							!c.getStringList("exempt-list").isEmpty()) {
						for (String p : c.getStringList("exempt-list")) {
							if (e.getPlayer().getName().equalsIgnoreCase(p)) {
								remove = 1;
							}
						}
						if (remove == 0) {
							for (String s : c.getStringList("lore-list")) {
								if (meta.getLore() != null && !meta.getLore().isEmpty()) {
									for (String f : meta.getLore()) {
										if (s.equals(f) || s.equals("xInf[]")) {
											itemStack.setAmount(0);
											API.println(print + e.getPlayer().getName());
										}
									}
								}
							}
						}
					}
					if (c.getStringList("limited-items") != null &&
							!c.getStringList("limited-items").isEmpty())
						for (String s : c.getStringList("limited-items")) {
							if (itemStack != null && s.equals(itemStack.getType().toString()) && itemStack.getAmount() > c.getInt("maxstacksize")) {
								itemStack.setAmount(c.getInt("maxstacksize"));
							}
						}
				}
			}
			b++;
		}
		ItemStack item = e.getOffHandItem();
		if (item != null && (item.getType().toString().equals("MONSTER_EGG") || item.getType().toString().equals("MONSTER_EGGS")) && c.getBoolean("removeeggs")) {
			item.setAmount(0);
		}
		if (c.getBoolean("itemrestriction")) {
			for (String s : c.getStringList("limited-items")) {
				if (item != null && s.equals(item.getType().toString()) && item.getAmount() > c.getInt("maxstacksize")) {
					item.setAmount(c.getInt("maxstacksize"));
				}
			}
		}
		assert item != null;
		if (item.getType().toString().contains("WRITABLE") || item.getType().toString().contains("BOOK")) {
			player.sendMessage(ChatColor.translateAlternateColorCodes('&', c.getString("Offhand-Server-Crash.Book-message")));
			e.getPlayer().getInventory().remove(item);
			player.damage(10.0D);
			e.setCancelled(true);
		}
	}
}
/*
 * .. _____________________ ..
 *  -- // WARNING \\ --
 *  -- THIS WORK IS UNDER EXCLUSIVE COPRIGHT FOR BAITCORP LABS. DISTRIBUTION, MODIFICATION, SELLING, OR SHARING WITHOUT EXPLICIT PERMISSION FROM BAITCORP LABS IS STRICTLY PROHIBITED.
 *  -- THIS PROGRAM IS LICENSED FOR MODIFICATION TO AND ONLY TO: "BAITCORP LABS" [FR], "CCHOST PARIS" [FR].
 *  --
 *  -- ExploitsX Sebastian Giheta 2019-2020
 * .. _____________________ ..
 *
 * .. _____________________ ..
 *  ___________              .__         .__  __         ____  ___              _________ .__            __   _________
 *  \_   _____/__  _________ |  |   ____ |__|/  |_  _____\   \/  /     .__      \_   ___ \|  |__ _____ _/  |_ \_   ___ \  ____
 *   |    __)_\  \/  /\____ \|  |  /  _ \|  \   __\/  ___/\     /    __|  |___  /    \  \/|  |  \\__  \\   __\/    \  \/ /  _ \
 *   |        \>    < |  |_> >  |_(  <_> )  ||  |  \___ \ /     \   /__    __/  \     \___|   Y  \/ __ \|  |  \     \___(  <_> )
 *  /_______  /__/\_ \|   __/|____/\____/|__||__| /____  >___/\  \     |__|      \______  /___|  (____  /__|   \______  /\____/
 *          \/      \/|__|                             \/      \_/                      \/     \/     \/              \/
 *
 *  ExploitsX by Sebastian Giheta, owner of 8b8t.xyz
 * .. _____________________ ..
 */

package me.bait.exploitfixer.exploits;


import com.destroystokyo.paper.event.entity.EntityTeleportEndGatewayEvent;
import me.bait.exploitfixer.exploitfixer;
import me.bait.exploitfixer.util.API;
import me.bait.exploitfixer.util.CH;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPortalEvent;
import org.bukkit.event.player.PlayerTeleportEvent;
import org.bukkit.scheduler.BukkitRunnable;


public class OnTeleport
		implements Listener {

	@EventHandler
	public void onEntityEndPortal(EntityTeleportEndGatewayEvent event) {
		if (CH.getBoolean("gateway") &&
				!(event.getEntity() instanceof Player)) {
			event.setCancelled(true);

		}

	}


	@EventHandler
	public void onEntityPortal(EntityPortalEvent event) {
		if (CH.getBoolean("portal") && !(event.getEntity() instanceof Player)) {
			event.setCancelled(true);
		}
	}


	@EventHandler
	public void onTeleport(final PlayerTeleportEvent e) {
		final Player player = e.getPlayer();
		if (player.isInsideVehicle() && exploitfixer.getPlugin().getConfig().getBoolean("disable-riding-teleport")) {
			e.setCancelled(true);
			if (exploitfixer.getPlugin().getConfig().getBoolean("debug")) {
				Bukkit.getLogger().info("ExploitsX cancelled a riding teleport from " + e.getPlayer());
			}
		}
		int spawn = exploitfixer.getPlugin().getConfig().getInt("sr");
		if (spawn != 0 && spawn != -1 && !player.isOp() && player.getLocation().getBlockX() < spawn &&
				player.getLocation().getBlockX() > -spawn && player.getLocation().getBlockZ() < spawn &&
				player.getLocation().getBlockZ() > -spawn && (
				e.getCause() == PlayerTeleportEvent.TeleportCause.PLUGIN || e.getCause() == PlayerTeleportEvent.TeleportCause.COMMAND)) {
			player.sendMessage(ChatColor.translateAlternateColorCodes('&', "&6you must be " + spawn + " from spawn to use /home && /tpa"));
			e.setCancelled(true);

		}
		if (exploitfixer.getPlugin().getConfig().getBoolean("teleport-exploit-patch")) {
			if (exploitfixer.getPlugin().getConfig().getBoolean("debug")) {
				Bukkit.getLogger().info("ExploitsX Detected teleport from " + e.getPlayer() + " executed by " + e.getCause());

			}
			if (e.getCause() == PlayerTeleportEvent.TeleportCause.COMMAND) {
				e.setCancelled(true);
				final Location to = e.getTo();
				API.teleportPlayer(player, API.getRandom(7500), 18000, API.getRandom(7500), player.getWorld());
				(new BukkitRunnable() {
					public void run() {
						if (exploitfixer.getPlugin().getConfig().getBoolean("debug")) {
							Bukkit.getLogger().info("ExploitsX Fixing Teleport location for " + e.getPlayer());
						}
						API.teleportPlayer(player, to.getBlockX(), to.getBlockY(), to.getBlockZ(), to.getWorld());
					}
				}).runTaskLater(exploitfixer.getPlugin(), 2L);
			}
		}
	}
}
/*
 * .. _____________________ ..
 *  -- // WARNING \\ --
 *  -- THIS WORK IS UNDER EXCLUSIVE COPRIGHT FOR BAITCORP LABS. DISTRIBUTION, MODIFICATION, SELLING, OR SHARING WITHOUT EXPLICIT PERMISSION FROM BAITCORP LABS IS STRICTLY PROHIBITED.
 *  -- THIS PROGRAM IS LICENSED FOR MODIFICATION TO AND ONLY TO: "BAITCORP LABS" [FR], "CCHOST PARIS" [FR].
 *  --
 *  -- ExploitsX Sebastian Giheta 2019-2020
 * .. _____________________ ..
 *
 * .. _____________________ ..
 *  ___________              .__         .__  __         ____  ___              _________ .__            __   _________
 *  \_   _____/__  _________ |  |   ____ |__|/  |_  _____\   \/  /     .__      \_   ___ \|  |__ _____ _/  |_ \_   ___ \  ____
 *   |    __)_\  \/  /\____ \|  |  /  _ \|  \   __\/  ___/\     /    __|  |___  /    \  \/|  |  \\__  \\   __\/    \  \/ /  _ \
 *   |        \>    < |  |_> >  |_(  <_> )  ||  |  \___ \ /     \   /__    __/  \     \___|   Y  \/ __ \|  |  \     \___(  <_> )
 *  /_______  /__/\_ \|   __/|____/\____/|__||__| /____  >___/\  \     |__|      \______  /___|  (____  /__|   \______  /\____/
 *          \/      \/|__|                             \/      \_/                      \/     \/     \/              \/
 *
 *  ExploitsX by Sebastian Giheta, owner of 8b8t.xyz
 * .. _____________________ ..
 */

package me.bait.exploitfixer;

import me.bait.exploitfixer.abuseprotect.OpPrevent;
import me.bait.exploitfixer.chatco.AllChat;
import me.bait.exploitfixer.chatco.CCPlayer;
import me.bait.exploitfixer.chatco.Spoilers;
import me.bait.exploitfixer.chatco.Whispers;
import me.bait.exploitfixer.exploits.*;
import me.bait.exploitfixer.gameplay.*;
import me.bait.exploitfixer.util.*;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.UUID;

public class exploitfixer extends JavaPlugin implements Listener {
	public static final ArrayList<CCPlayer> playerlist = new ArrayList<>();
	public static File Configuration2;
	public static File WhisperLog;
	public static File CommandLog;
	public static File Changelog;
	public static File dataFolder;
	private final Spoilers spoilerListener = new Spoilers(this);
	private final Whispers whisperListener = new Whispers(this);
	public boolean checkForChatDisable = false;
	public boolean checkForIgnores = false;
	HashMap<UUID, Integer> duping = new HashMap<>();
	FileConfiguration config = getConfig();

	public static exploitfixer getPlugin() {
		return getPlugin(exploitfixer.class);
	}

	public static String now() {
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		return sdf.format(cal.getTime());
	}

	private void copy(InputStream in, File file) {
		try {
			OutputStream out = new FileOutputStream(file);
			byte[] buf = new byte[1024];
			int len;
			while ((len = in.read(buf)) > 0)
				out.write(buf, 0, len);
			out.close();
			in.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void docommandLog(String text, String sender) {
		try {
			FileWriter fwo = new FileWriter(CommandLog, true);
			BufferedWriter bwo = new BufferedWriter(fwo);
			bwo.write(now() + " " + sender + ": " + text);
			bwo.newLine();
			bwo.close();
		} catch (IOException ioexception) {
			ioexception.printStackTrace();
		}
	}

	public CCPlayer getCCPlayer(Player p) throws IOException {
		for (CCPlayer cp : playerlist) {
			if (cp.playerName.equals(p.getName()))
				return cp;
		}
		CCPlayer ccp = new CCPlayer(p, p.getName());
		playerlist.add(ccp);
		return ccp;
	}

	private void ignorePlayer(Player p, String target) throws IOException {
		if (target != null) {
			if (Bukkit.getPlayer(target) == null) {
				p.sendMessage(ChatColor.DARK_RED + "That is not a player.");
			} else {
				String message = String.valueOf(String.valueOf(ChatColor.RED.toString())) + ChatColor.ITALIC + target + ChatColor.RESET +
						ChatColor.RED;
				if (getCCPlayer(p).isIgnored(target)) {
					message = message + " unignored.";
				} else {
					message = message + " ignored.";
				}
				p.sendMessage(message);
				getCCPlayer(p).saveIgnoreList(target);
			}
		} else {
			p.sendMessage(ChatColor.DARK_RED + "That is not a player.");
		}
	}


	public boolean onCommand(CommandSender sender, Command cmd, String commandLabel, String[] args) {
		if (getConfig().getBoolean("debug")) {
			String l = "OnCommand detected from '" + sender.getName() + "' with commandlabel: '" + commandLabel + "'";
			getPlugin().getServer().getLogger().info(l);
		}
		if (!sender.isOp() && CH.getBoolean("enable-ghost-mode") && CH.getInt("ghost-mode-confirm-code") == 64584) {
			char ap = '"';
			sender.sendMessage(ChatColor.WHITE + "Unknown command. Type " + ap + "/help" + ap + " for help.");
			return true;
		}
		if (cmd.getName().equalsIgnoreCase("e") || cmd.getName().equalsIgnoreCase("exploits")) {
			if (args.length == 0) {
				if (CH.getBoolean("branding", true)) {
					sender.sendMessage(ChatColor.GREEN + "This server is running " +
							API.getPrefix() + ChatColor.GREEN + "by Bubba#8888 with BAITCORP");
				}
				sender.sendMessage(ChatColor.GREEN + "Type /e help for help.");
				return true;
			}
			if (args.length == 1 && args[0].equalsIgnoreCase("reload")) {
				if (sender.isOp()) {
					reloadConfig();
					Interaction.reload();
					Update.checkUpdates();
					Offhand.reload();
					AllChat.reload();
					API.alertMessage("&aConfiguration has been reloaded. Some features like /stats will need a plugin reload to function.");
					return true;
				}
				sender.sendMessage(ChatColor.YELLOW + "ExploitsX" + ChatColor.GRAY + " > " + ChatColor.RED +
						"No permissions.");
				return true;
			}

			if (args.length == 1 && args[0].equalsIgnoreCase("info")) {
				if (CH.getBoolean("branding", true)) {
					sender.sendMessage(
							ChatColor.RED + "- ExploitsX - " + ChatColor.AQUA + "v" + getDescription().getVersion());
					sender.sendMessage(ChatColor.YELLOW + "https://www.mc-market.org/resources/17497/");
				}
				sender.sendMessage(ChatColor.YELLOW + " Version" + ChatColor.GRAY + "> " + ChatColor.AQUA + "This server is running on version: " + ChatColor.GOLD + Bukkit.getServer().getBukkitVersion() + ChatColor.AQUA + " (" + ChatColor.GOLD + Bukkit.getServer().getBukkitVersion().split("-")[0] + ChatColor.AQUA + ") (" + ChatColor.GOLD + "MODDED" + ChatColor.AQUA + ")");
				sender.sendMessage(ChatColor.YELLOW + " Uptime" + ChatColor.GRAY + "> " + ChatColor.AQUA + "This server has been online for: " + ChatColor.GOLD + API.timeseconds + "s" + ChatColor.AQUA + " (" + ChatColor.GOLD + API.GetFormattedInterval(API.timeseconds) + ChatColor.AQUA + ")");
				sender.sendMessage(ChatColor.YELLOW + " Max Players" + ChatColor.GRAY + "> " + ChatColor.AQUA + "This server supports up to: " + ChatColor.GOLD + Bukkit.getMaxPlayers() + ChatColor.AQUA + " Players.");
				sender.sendMessage(ChatColor.YELLOW + " Online Players" + ChatColor.GRAY + "> " + ChatColor.AQUA + "This server has: " + ChatColor.GOLD + Bukkit.getOnlinePlayers().size() + ChatColor.AQUA + " Players connected.");
				sender.sendMessage(ChatColor.YELLOW + " Offline Players" + ChatColor.GRAY + "> " + ChatColor.AQUA + "This server has seen: " + ChatColor.GOLD + (Bukkit.getOfflinePlayers()).length + ChatColor.AQUA + " Players.");
				sender.sendMessage(ChatColor.YELLOW + " RAM Usage" + ChatColor.GRAY + "> " + ChatColor.AQUA + "This server is using: " + ChatColor.GOLD + API.getMemUsed() + ChatColor.AQUA + "MB / " + ChatColor.GOLD + API.getMemTotal() + ChatColor.AQUA + "MB RAM");
				sender.sendMessage(ChatColor.YELLOW + " V-INT" + ChatColor.GRAY + "> " + ChatColor.AQUA + "This server is using ExploitsX compat mode for: '" + ChatColor.GOLD + API.getVersionInt() + ChatColor.AQUA + "'");
				sender.sendMessage(ChatColor.YELLOW + " TPS" + ChatColor.GRAY + "> " + ChatColor.AQUA + "This server is running at: " + API.format(API.getTps()) + ChatColor.AQUA + " TPS");
				return true;
			}
			if (args.length == 1 && args[0].equalsIgnoreCase("tps")) {
				sender.sendMessage("TPS: " + API.format(API.getTps()));
				return true;
			}
			if (args.length == 1 && args[0].equalsIgnoreCase("help")) {
				if (CH.getBoolean("branding", true)) {
					sender.sendMessage(
							ChatColor.RED + "- ExploitsX - " + ChatColor.AQUA + "v" + getDescription().getVersion());
				} else {
					sender.sendMessage(
							ChatColor.RED + "- ExploitsX Help - ");
				}
				if (sender.isOp()) {
					sender.sendMessage(ChatColor.YELLOW + " /e reload" + ChatColor.GRAY + "> " + ChatColor.AQUA +
							"Reload ExploitsX [op]");
					sender.sendMessage(ChatColor.YELLOW + " /xitem (shulker box material) (material) (durability)" + ChatColor.GRAY + "> " + ChatColor.AQUA + "Spawn a shulker filled with a certain item [op, for testing]");
					sender.sendMessage(ChatColor.YELLOW + " /uitem (material) (durability)" + ChatColor.GRAY + "> " + ChatColor.AQUA + "Spawn an unlimited item [op, for testing]");
				}
				sender.sendMessage(ChatColor.YELLOW + " /e help " + ChatColor.GRAY + "> " + ChatColor.AQUA +
						"View ExploitsX Help");
				sender.sendMessage(ChatColor.YELLOW + " /e info " + ChatColor.GRAY + "> " + ChatColor.AQUA +
						"View Server Info");
				sender.sendMessage(
						ChatColor.YELLOW + " /e tps " + ChatColor.GRAY + "> " + ChatColor.AQUA + "View Accurate TPS");
				sender.sendMessage(
						ChatColor.YELLOW + " /e " + ChatColor.GRAY + "> " + ChatColor.AQUA + "View Version & Contact");
				if (CH.getBoolean("branding", true)) {
					sender.sendMessage(ChatColor.RED +
							"- ExploitsX, Rightfully created under EU privacy law by Sebastian Giheta ⁽ᵇᵃᶦᵗᶜᵒʳᵖ / ᴮᵃᶦᵗ~⁸⁸⁸⁸⁾");
				}
				return true;
			}
			return false;
		}
		if (getConfig().getBoolean("plspoof") &&
				cmd.getName().equalsIgnoreCase("pl")) {
			if (getConfig().getBoolean("8b8tpl")) {
				sender.sendMessage(ChatColor.RED +
						"This information is provided from 8b8t United's promise of transparency.");
				sender.sendMessage(ChatColor.WHITE + "Plugins (22): " + ChatColor.GREEN + "8b8t-CORE" +
						ChatColor.WHITE + ", " + ChatColor.GREEN + "BaymaxAC-PRO" + ChatColor.WHITE + ", " +
						ChatColor.GREEN + "BestViewDistance" + ChatColor.WHITE + ", " + ChatColor.GREEN +
						"BuycraftX" + ChatColor.WHITE + ", " + ChatColor.GREEN + "dupeplugin" +
						ChatColor.WHITE + ", " + ChatColor.GREEN + "ElytraRoofPatch" + ChatColor.WHITE + ", " +
						ChatColor.GREEN + "Essentials" + ChatColor.WHITE + ", " + ChatColor.GREEN +
						"ExploitFixer" + ChatColor.WHITE + ", " + ChatColor.GREEN + "ExploitsX" +
						ChatColor.WHITE + ", " + ChatColor.GREEN + "HamsterAPI" + ChatColor.WHITE + ", " +
						ChatColor.GREEN + "PermissionsEx" + ChatColor.WHITE + ", " + ChatColor.GREEN +
						"PlaceholderAPI" + ChatColor.WHITE + ", " + ChatColor.GREEN + "PlugMan" +
						ChatColor.WHITE + ", " + ChatColor.GREEN + "ProtocolLib" + ChatColor.WHITE + ", " +
						ChatColor.GREEN + "spark" + ChatColor.WHITE + ", " + ChatColor.GREEN + "Tablist" +
						ChatColor.WHITE + ", " + ChatColor.GREEN + "UltimateAutoRestart" + ChatColor.WHITE +
						", " + ChatColor.GREEN + "Vault" + ChatColor.WHITE + ", " + ChatColor.GREEN +
						"ViaBackwards" + ChatColor.WHITE + ", " + ChatColor.GREEN + "ViaRewind" +
						ChatColor.WHITE + ", " + ChatColor.GREEN + "ViaVersion" + ChatColor.WHITE + ", " +
						ChatColor.GREEN + "Worldstats");
				sender.sendMessage(ChatColor.RED +
						" - 8b8t.xyz, Rightfully owned under EU law by Sebastian Giheta ⁽ᵇᵃᶦᵗᶜᵒʳᵖ / ᴮᵃᶦᵗ~⁸⁸⁸⁸⁾");
				return true;
			}
			if (!getConfig().getString("plprefix").equals("disable") || !getConfig().getString("plprefix").equals("false")) {
				sender.sendMessage(
						ChatColor.translateAlternateColorCodes('&', getConfig().getString("plprefix")));
			}
			sender.sendMessage(
					ChatColor.translateAlternateColorCodes('&', getConfig().getString("plmessage")));
			if (!getConfig().getString("plsuffix").equals("disable") || !getConfig().getString("plsuffix").equals("false")) {
				sender.sendMessage(
						ChatColor.translateAlternateColorCodes('&', getConfig().getString("plsuffix")));
			}
			return true;
		}


		if (sender instanceof Player) {
			if (cmd.getName().equalsIgnoreCase("togglechat") && getConfig().getBoolean("toggleChatEnabled", true)) {
				try {
					if (toggleChat((Player) sender)) {
						sender.sendMessage(ChatColor.RED.toString() +
								"Your chat is now disabled until you type /togglechat or relog.");
					} else {
						sender.sendMessage(ChatColor.RED.toString() +
								"Your chat has been re-enabled, type /togglechat to disable it again.");
					}
				} catch (IOException e) {
					e.printStackTrace();
				}
				return true;
			}
			if (cmd.getName().equalsIgnoreCase("toggletells")) {
				try {
					if (toggleTells((Player) sender)) {
						sender.sendMessage(ChatColor.RED.toString() +
								"You will no longer receive tells, type /toggletells to see them again.");
					} else {
						sender.sendMessage(ChatColor.RED.toString() +
								"You now receive tells, type /toggletells to disable them again.");
					}
				} catch (IOException e) {
					e.printStackTrace();
				}
				return true;
			}
			if ((cmd.getName().equalsIgnoreCase("ignore") || cmd.getName().equalsIgnoreCase("unignore")) &&
					getConfig().getBoolean("ignoresEnabled", true) && args.length != 0)
				try {
					API.println("Attempting to ignore player " + args[0]);
					if (args.length < 1) {
						sender.sendMessage("You forgot to type the name of the player.");
						return true;
					}
					if (args[0].length() > 16) {
						sender.sendMessage("You entered an invalid player name.");
						return true;
					}
					Player ignorable = Bukkit.getServer().getPlayer(args[0]);
					if (ignorable == null) {
						sender.sendMessage("You entered a player who doesn't exist or is offline.");
						return true;
					}
					ignorePlayer((Player) sender, args[0]);
					return true;
				} catch (IOException e) {
					e.printStackTrace();
				}
			if (cmd.getName().equalsIgnoreCase("ignorelist") && getConfig().getBoolean("ignoresEnabled", true))
				try {
					sender.sendMessage(ChatColor.RED.toString() + "Ignored players:");
					int i = 0;
					final String s = String.valueOf(String.valueOf(ChatColor.RED.toString()));
					for (String ignores : getCCPlayer((Player) sender).getIgnoreList()) {
						sender.sendMessage(s + ChatColor.ITALIC + ignores);
						i++;
					}
					sender.sendMessage(s + i + " players ignored.");
					return true;
				} catch (IOException e) {
					e.printStackTrace();
				}
		}
		if (args.length > 0 && cmd.getName().equalsIgnoreCase("chatco")) {
			if (sender.isOp()) {
				if (args.length == 1) {
					if (args[0].equalsIgnoreCase("reload")) {
						reloadConfig();
						sender.sendMessage("ExploitsXChat config reloaded!");
						return true;
					}

					sender.sendMessage(
							"You forgot to specify whether you wanted to enable or disable the component (chatco component e/ed)");
					return true;
				}
				if (args[0].equalsIgnoreCase("spoilers"))
					if (args[1].equalsIgnoreCase("e")) {
						AllChat.readConfig(3);
						sender.sendMessage("Spoilers enabled");
					} else if (args[1].equalsIgnoreCase("d")) {
						AllChat.readConfig(4);
						sender.sendMessage("Spoilers disabled");
					}
				if (args[0].equalsIgnoreCase("whispers"))
					if (args[1].equalsIgnoreCase("e")) {
						AllChat.readConfig(5);
						sender.sendMessage("Whisper changes enabled");
					} else if (args[1].equalsIgnoreCase("d")) {
						AllChat.readConfig(6);
						sender.sendMessage("Whisper changes disabled");
					}
				if (args[0].equalsIgnoreCase("newcommands"))
					if (args[1].equalsIgnoreCase("e")) {
						AllChat.readConfig(7);
						sender.sendMessage("New Whisper commands enabled");
					} else if (args[1].equalsIgnoreCase("d")) {
						AllChat.readConfig(8);
						sender.sendMessage("New whisper commands disabled");
					}
				if (args[0].equalsIgnoreCase("whisperlog"))
					if (args[1].equalsIgnoreCase("e")) {
						AllChat.readConfig(9);
						sender.sendMessage("Whisperlog enabled");
					} else if (args[1].equalsIgnoreCase("d")) {
						AllChat.readConfig(10);
						sender.sendMessage("Whisperlog disabled");
					}
				return true;
			}
			return false;
		}

		return false;
	}


	public void onDisable() {
		RegisterStats.onDisable();
		if (CH.getBoolean("clearvillagedata", true)) {
			API.clearMemFiles(CH.getString("clearworldname", "world"));
		}
		getServer().getLogger().info("[ExploitsX] plugin disabled.");
	}


	public void onEnable() {
		getServer().getLogger().info("ExploitsX > Loading...");
		getServer().getLogger().info("ExploitsX > Loading Data Folders...");
		File dir = new File("plugins/ExploitsX");
		if (!dir.exists())
			dir.mkdirs();
		dataFolder = getDataFolder();
		getServer().getLogger().info("ExploitsX > Loading Config...");
		saveDefaultConfig();
		CH.enable();
		int loglvl = CH.getInt("logging-level", 2);
		if (loglvl > 1) getServer().getLogger().info("ExploitsX > Hooking into PlaceholderAPI...");
		if (Bukkit.getPluginManager().getPlugin("PlaceholderAPI") != null) {
			Bukkit.getPluginManager().registerEvents(this, this);
			(new Placeholder()).register();
		} else {
			getLogger().warning("ExploitsX > Could not find PlaceholderAPI! This plugin is required if you want to use placeholders.");
		}
		if (loglvl > 0) getServer().getLogger().info("ExploitsX > Hooking into BungeeCord proxy...");
		if (loglvl > 1) getServer().getLogger().info("ExploitsX > Hooking into Waterfall proxy...");
		if (loglvl > 1) getServer().getLogger().info("ExploitsX > Hooking into Travertine proxy...");
		getServer().getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");
		if (loglvl > 0) getServer().getLogger().info("ExploitsX > Loading PluginManager...");
		PluginManager pm = getServer().getPluginManager();
		pm.registerEvents(new AntiRedstone(), this);
		pm.registerEvents(new ChunkBan(), this);
		pm.registerEvents(new Offhand(), this);
		pm.registerEvents(new LightingLag(), this);
		pm.registerEvents(new portalbreaker(), this);
		pm.registerEvents(new LagPatches(), this);
		pm.registerEvents(new Join(), this);
		pm.registerEvents(new Entity(), this);
		pm.registerEvents(new CommandHandle(), this);
		pm.registerEvents(new OnTeleport(), this);
		pm.registerEvents(new MapFill(), this);
		pm.registerEvents(new AllChat(this), this);
		pm.registerEvents(new ItemSpawn(), this);
		pm.registerEvents(new JoinLeave(), this);
		pm.registerEvents(new OpPrevent(), this);
		pm.registerEvents(new Interaction(), this);
		if (loglvl > 1) getServer().getLogger().info("ExploitsX > Starting ViolationMaps...");
		Interaction.begin();
		LightingLag.begin();
		if (loglvl > 1) getServer().getLogger().info("ExploitsX > Starting TPS clock...");
		Bukkit.getServer().getScheduler().scheduleSyncRepeatingTask(this, new TPS(), 100L, 1L);
		if (loglvl > 0) getServer().getLogger().info("ExploitsX > Loading Log Files...");
		WhisperLog = new File(dataFolder, "whisperlog.txt");
		CommandLog = new File(dataFolder, "commandlog.txt");
		Changelog = new File(dataFolder, "changelog.txt");
		if (!WhisperLog.exists()) {
			WhisperLog.getParentFile().mkdirs();
			copy(getResource("whisperlog.txt"), WhisperLog);
		}
		if (!CommandLog.exists()) {
			CommandLog.getParentFile().mkdirs();
			copy(getResource("commandlog.txt"), CommandLog);
		}
		File cl = new File("plugins/ExploitsX/changelog.txt");
		if (cl.exists())
			cl.delete();
		Changelog.getParentFile().mkdirs();
		copy(getResource("changelog.txt"), Changelog);
		if (loglvl > 1) getServer().getLogger().info("ExploitsX > Checking if plugin updated...");
		if (loglvl > 0) getServer().getLogger().info("ExploitsX > Checking configurations for updates...");
		Update.checkUpdates();
		getServer().getLogger().info("ExploitsX > Loading Commands...");
		getCommand("e").setExecutor(this);
		getCommand("exploits").setExecutor(this);
		getCommand("xitem").setExecutor(new CommandHandle());
		getCommand("uitem").setExecutor(new CommandHandle());
		if (getConfig().getBoolean("statssavedata")) {
			getServer().getLogger().info("ExploitsX > Loading Statistics...");
			getServer().getPluginManager().registerEvents(new RegisterStats(), this);
			if (getConfig().getBoolean("statsenable")) {
				getCommand("stats").setExecutor(new RegisterStats());
				getCommand("statistics").setExecutor(new RegisterStats());
				getCommand("stat").setExecutor(new RegisterStats());
			}
		}
		if (loglvl > 1) getServer().getLogger().info("ExploitsX > Loading Violationmap...");
		if (getConfig().getBoolean("plspoof")) {
			getCommand("pl").setExecutor(this);
		}
		if (loglvl > 0) getServer().getLogger().info("ExploitsX > Loading Chat System...");
		if (getConfig().getBoolean("ChatCo.chatDisableEnabled", true))
			this.checkForChatDisable = true;
		if (getConfig().getBoolean("ChatCo.ignoresEnabled", true))
			this.checkForIgnores = true;
		if (getConfig().getBoolean("ChatCo.WhisperChangesEnabled", true))
			pm.registerEvents(this.whisperListener, this);
		if (getConfig().getBoolean("ChatCo.SpoilersEnabled", false))
			pm.registerEvents(this.spoilerListener, this);
		if (loglvl > 1) getServer().getLogger().info("ExploitsX > Loading ArmorCheck Scheduler...");
		if (getConfig().getBoolean("itemrestriction") && this.config.getBoolean("armorcheck")) {
			Bukkit.getScheduler().scheduleSyncRepeatingTask(this, new Runnable() {
				public void run() {
					Offhand.clearfunc();
				}
			}, 20L, getConfig().getLong("armorchecktickdelay"));
		}
		if (loglvl > 1) getServer().getLogger().info("ExploitsX > Loading Uptime Scheduler...");
		API.uptime();
		if (loglvl > 1) getServer().getLogger().info("ExploitsX > Loading MemClearGC Scheduler...");
		Bukkit.getScheduler().scheduleSyncRepeatingTask(this, new Runnable() {
			public void run() {
				Bukkit.getLogger().info("ExploitsX > Clearing hashmap data...");
				exploitfixer.this.duping.clear();
				AllChat.vlchat.clear();
				Join.ef.clear();
				Join.send.clear();
				AllChat.vlchat.clear();
				Bukkit.getLogger().info("ExploitsX > Cleared hashmap data.");
			}
		}, 20L, getConfig().getLong("clear-interval"));
		if (loglvl > 1) getServer().getLogger().info("ExploitsX > Loading Statistics Registers...");
		RegisterStats.onEnable();
		getServer().getLogger().info(String.valueOf(API.getPrefix()) + ChatColor.GREEN + "by Bait#8888 Successfully Enabled!");
	}

	@EventHandler
	public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event) {
		String message = event.getMessage();
		Player player = event.getPlayer();
		if (message.contains("**") || message.contains("@a")) {
			event.setCancelled(true);
			player.kickPlayer(API.getPrefix() + "Illegal Syntax in command.");
		}
		if (getConfig().getBoolean("log-commands")) {
			docommandLog(message, player.getName());
		}
		String label = event.getMessage().toLowerCase();
		if (label.startsWith("/donate") &&
				getConfig().getBoolean("donatecommand")) {
			CommandHandle.donate(event);
		}

		if (label.startsWith("/discord") &&
				getConfig().getBoolean("discordcommand")) {
			CommandHandle.discord(event);
		}
	}


	private boolean toggleChat(Player p) throws IOException {
		if ((getCCPlayer(p)).chatDisabled) {
			(getCCPlayer(p)).chatDisabled = false;
			return false;
		}
		(getCCPlayer(p)).chatDisabled = true;
		return true;
	}

	private boolean toggleTells(Player p) throws IOException {
		if ((getCCPlayer(p)).tellsDisabled) {
			(getCCPlayer(p)).tellsDisabled = false;
			return false;
		}
		(getCCPlayer(p)).tellsDisabled = true;
		return true;
	}
}
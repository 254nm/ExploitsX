/*
 * .. _____________________ ..
 *  -- // WARNING \\ --
 *  -- THIS WORK IS UNDER EXCLUSIVE COPRIGHT FOR BAITCORP LABS. DISTRIBUTION, MODIFICATION, SELLING, OR SHARING WITHOUT EXPLICIT PERMISSION FROM BAITCORP LABS IS STRICTLY PROHIBITED.
 *  -- THIS PROGRAM IS LICENSED FOR MODIFICATION TO AND ONLY TO: "BAITCORP LABS" [FR], "CCHOST PARIS" [FR].
 *  --
 *  -- ExploitsX Sebastian Giheta 2019-2020
 * .. _____________________ ..
 *
 * .. _____________________ ..
 *  ___________              .__         .__  __         ____  ___              _________ .__            __   _________
 *  \_   _____/__  _________ |  |   ____ |__|/  |_  _____\   \/  /     .__      \_   ___ \|  |__ _____ _/  |_ \_   ___ \  ____
 *   |    __)_\  \/  /\____ \|  |  /  _ \|  \   __\/  ___/\     /    __|  |___  /    \  \/|  |  \\__  \\   __\/    \  \/ /  _ \
 *   |        \>    < |  |_> >  |_(  <_> )  ||  |  \___ \ /     \   /__    __/  \     \___|   Y  \/ __ \|  |  \     \___(  <_> )
 *  /_______  /__/\_ \|   __/|____/\____/|__||__| /____  >___/\  \     |__|      \______  /___|  (____  /__|   \______  /\____/
 *          \/      \/|__|                             \/      \_/                      \/     \/     \/              \/
 *
 *  ExploitsX by Sebastian Giheta, owner of 8b8t.xyz
 * .. _____________________ ..
 */

package me.bait.exploitfixer.util;

import me.bait.exploitfixer.exploitfixer;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;

import java.util.HashMap;


public class ViolationUtils {
	HashMap<Player, Integer> vlMap = new HashMap<>();
	HashMap<Player, Boolean> vlActive = new HashMap<>();

	public void addVls(Player player, int vls) {
		if (!vlMap.containsKey(player)) {
			vlMap.put(player, vls);
		} else {
			vlMap.replace(player, Vls(player) + 1);
		}
	}

	public void begin() {
		Bukkit.getScheduler().runTaskTimer(exploitfixer.getPlugin(), () -> {
			for (Player player : Bukkit.getOnlinePlayers()) {
				if (vlMap.containsKey(player) &&
						vlActive.containsKey(player)) {
					if (getVls(player) > 0) {
						vlMap.replace(player, getVls(player) - 1);
						continue;
					}
					vlMap.remove(player);
					vlActive.remove(player);
				}

			}

		}, exploitfixer.getPlugin().getConfig().getLong("vlremovedelaystartupby"), exploitfixer.getPlugin().getConfig().getLong("vlremovedelay"));
	}

	public void begin(int speed) {
		Bukkit.getScheduler().runTaskTimer(exploitfixer.getPlugin(), () -> {
			for (Player player : Bukkit.getOnlinePlayers()) {
				if (vlMap.containsKey(player) &&
						vlActive.containsKey(player)) {
					if (getVls(player) > 0) {
						vlMap.replace(player, getVls(player) - 1);
						continue;
					}
					vlMap.remove(player);
					vlActive.remove(player);
				}

			}

		}, exploitfixer.getPlugin().getConfig().getLong("vlremovedelaystartupby"), exploitfixer.getPlugin().getConfig().getLong("vlremovedelay") * speed);
	}

	public int getVls(Player player) {
		int vls = 0;
		if (vlMap.containsKey(player)) {
			vls = vlMap.get(player);
		}
		return vls;
	}

	public void removeVL(Player player) {
		if (vlActive.containsKey(player)) {
			vlActive.replace(player, true);
		} else {
			vlActive.put(player, true);
		}
	}

	public void resetVls(Player player) {
		vlMap.remove(player);
		vlActive.remove(player);
	}

	public boolean vlMapContainsPlayer(Player player) {
		return vlMap.containsKey(player);
	}


	public int Vls(Player player) {
		return vlMap.get(player);
	}
}
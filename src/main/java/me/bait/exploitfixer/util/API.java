/*
 * .. _____________________ ..
 *  -- // WARNING \\ --
 *  -- THIS WORK IS UNDER EXCLUSIVE COPRIGHT FOR BAITCORP LABS. DISTRIBUTION, MODIFICATION, SELLING, OR SHARING WITHOUT EXPLICIT PERMISSION FROM BAITCORP LABS IS STRICTLY PROHIBITED.
 *  -- THIS PROGRAM IS LICENSED FOR MODIFICATION TO AND ONLY TO: "BAITCORP LABS" [FR], "CCHOST PARIS" [FR].
 *  --
 *  -- ExploitsX Sebastian Giheta 2019-2020
 * .. _____________________ ..
 *
 * .. _____________________ ..
 *  ___________              .__         .__  __         ____  ___              _________ .__            __   _________
 *  \_   _____/__  _________ |  |   ____ |__|/  |_  _____\   \/  /     .__      \_   ___ \|  |__ _____ _/  |_ \_   ___ \  ____
 *   |    __)_\  \/  /\____ \|  |  /  _ \|  \   __\/  ___/\     /    __|  |___  /    \  \/|  |  \\__  \\   __\/    \  \/ /  _ \
 *   |        \>    < |  |_> >  |_(  <_> )  ||  |  \___ \ /     \   /__    __/  \     \___|   Y  \/ __ \|  |  \     \___(  <_> )
 *  /_______  /__/\_ \|   __/|____/\____/|__||__| /____  >___/\  \     |__|      \______  /___|  (____  /__|   \______  /\____/
 *          \/      \/|__|                             \/      \_/                      \/     \/     \/              \/
 *
 *  ExploitsX by Sebastian Giheta, owner of 8b8t.xyz
 * .. _____________________ ..
 */

package me.bait.exploitfixer.util;

import me.bait.exploitfixer.exploitfixer;
import org.bukkit.*;
import org.bukkit.entity.Player;

import java.io.*;
import java.text.NumberFormat;
import java.util.Locale;


public class API {
	public static int timeseconds = 0;
	public static long memUsed = 0L;
	public static long memTotal = 0L;
	public static long memFree = 0L;
	static Locale locale = Locale.ENGLISH;
	static NumberFormat nf = NumberFormat.getNumberInstance(locale);
	static int version = Integer.parseInt(Bukkit.getServer().getBukkitVersion().split("-")[0].replaceAll("\\.", ""));

	public static void alertMessage(String message) {
		sendOpMessage(message);
		println(message);
	}

	public static void clearMemFiles(String worldName) {
		println(getPrefix() + "&aDeleting files that cause memory issues...");
		String nether = worldName.concat("_nether");
		String end = worldName.concat("_the_end");
		File fortress = new File(nether + "/data/Fortress.dat");
		File villagesNether = new File(nether + "/data/villages_nether.dat");
		if (fortress.delete()) {
			println(getPrefix() + "&eDeleted file " + fortress.getName());
		} else {
			println(getPrefix() + "&cCould not find file " + fortress.getPath());
		}
		if (villagesNether.delete()) {
			println(getPrefix() + "&eDeleted file " + villagesNether.getName());
		} else {
			println(getPrefix() + "&cCould not find file " + villagesNether.getPath());
		}
		File endCity = new File(end + "/data/EndCity.dat");
		File villagesEnd = new File(end + "/data/villages_end.dat");
		if (endCity.delete()) {
			println(getPrefix() + "&eDeleted file " + endCity.getName());
		} else {
			println(getPrefix() + "&cCould not find file " + endCity.getPath());
		}
		if (villagesEnd.delete()) {
			println(getPrefix() + "&eDeleted file " + villagesEnd.getName());
		} else {
			println(getPrefix() + "&cCould not find file " + villagesEnd.getPath());
		}
		File village = new File(worldName + "/data/Village.dat");
		File villages = new File(worldName + "/data/villages.dat");
		if (village.delete()) {
			println(getPrefix() + "&eDeleted file " + village.getName());
		} else {
			println(getPrefix() + "&cCould not find file " + village.getPath());
		}
		if (villages.delete()) {
			println(getPrefix() + "&eDeleted file " + villages.getName());
		} else {
			println(getPrefix() + "&cCould not find file " + villages.getPath());
		}
		println(getPrefix() + "&aCompleted, your fortress generation has been optimized!");
	}

	public static void crashPlayer(Player player) {
		for (int i = 0; i < 150; i++) {
			player.spawnParticle(Particle.EXPLOSION_HUGE, player.getLocation(), 2147483647, 1.0D, 1.0D, 1.0D);
		}
	}

	public static String format(double tps) {
		return ((tps > 18.0D) ? "§a" : ((tps > 16.0D) ? "§e" : "§c")) + ((tps > 20.0D) ? "" : "") + String.format("%.2f", Math.min(Math.round(tps * 100.0D) / 100.0D, 20.0D));
	}

	public static String GetFormattedInterval(long ms) {
		long seconds = ms % 60L;
		long minutes = ms / 60L % 60L;
		long hours = ms / 3600L % 24L;
		long days = ms / 86400L;
		return String.format("%dd %02dh %02dm %02ds", days, hours, minutes, seconds);
	}

	public static long getMemFree() {
		return memFree;
	}

	public static String getMemoryType(int MemoryType) {
		switch (MemoryType) {
			case 0:
				return "Unknown";
			case 1:
				return "Other";
			case 2:
				return "DRAM";
			case 3:
				return "Synchronous DRAM";
			case 4:
				return "Cache DRAM";
			case 5:
				return "EDO";
			case 6:
				return "EDRAM";
			case 7:
				return "VRAM";
			case 8:
				return "SRAM";
			case 9:
				return "RAM";
			case 10:
				return "ROM";
			case 11:
				return "Flash";
			case 12:
				return "EEPROM";
			case 13:
				return "FEPROM";
			case 14:
				return "EPROM";
			case 15:
				return "CDRAM";
			case 16:
				return "3DRAM";
			case 17:
				return "SDRAM";
			case 18:
				return "SGRAM";
			case 19:
				return "RDRAM";
			case 20:
				return "DDR";
			case 21:
				return "DDR-2";
			case 22:
				return "DDR2 FB-DIMM";
			case 23:
				return "Unknown (Possibly DDR3)";
			case 24:
				return "DDR3";
			case 25:
				return "DDR4";
		}
		return "Unknown, or GDDR5+ to GDDR6+";
	}


	public static long getMemTotal() {
		return memTotal;
	}

	public static long getMemUsed() {
		return memUsed;
	}

	public static Player getNearestPlayer(double i, Location loc) {
		Player rtn = null;
		for (Player nearby : loc.getNearbyPlayers(i)) {
			if (rtn == null) {
				rtn = nearby;
				continue;
			}
			if (nearby.getLocation().distance(loc) < rtn.getLocation().distance(loc)) {
				rtn = nearby;
			}
		}

		return rtn;
	}

	public static String getPrefix() {
		String prefix = "";
		if (CH.getBoolean("branding")) {
			prefix = ChatColor.LIGHT_PURPLE + "[" + ChatColor.GOLD + "ExploitsX " + ChatColor.BLUE + exploitfixer.getPlugin().getDescription().getVersion() + ChatColor.LIGHT_PURPLE + "] " + ChatColor.RESET;
		}
		return prefix;
	}

	public static int getRandom(int max) {
		return (int) (Math.random() * max);
	}

	public static double getTps() {
		double val = TPS.getTPS() + exploitfixer.getPlugin().getConfig().getInt("addtotps");
		return Double.parseDouble(nf.format(val));
	}

	public static int getVersionInt() {
		return version;
	}

	public static boolean isShulkerBox(Material m) {
		String s = m.toString();
		String str1;
		switch ((str1 = s).hashCode()) {
			case -1982939579:
				if (!str1.equals("LIGHT_GRAY_SHULKER_BOX")) {
					break;
				}
				return true;
			case -1337278289:
				if (!str1.equals("PINK_SHULKER_BOX")) break;
				return true;
			case -1324132210:
				if (!str1.equals("LIME_SHULKER_BOX")) break;
				return true;
			case -1047079230:
				if (!str1.equals("WHITE_SHULKER_BOX")) break;
				return true;
			case -1013052939:
				if (!str1.equals("PURPLE_SHULKER_BOX")) break;
				return true;
			case -557177022:
				if (!str1.equals("MAGENTA_SHULKER_BOX")) break;
				return true;
			case -452271318:
				if (!str1.equals("RED_SHULKER_BOX")) break;
				return true;
			case -179106457:
				if (!str1.equals("ORANGE_SHULKER_BOX")) break;
				return true;
			case -35571309:
				if (!str1.equals("BLUE_SHULKER_BOX")) break;
				return true;
			case 166209980:
				if (!str1.equals("LIGHT_BLUE_SHULKER_BOX")) break;
				return true;
			case 179135430:
				if (!str1.equals("SILVER_SHULKER_BOX")) break;
				return true;
			case 380854351:
				if (!str1.equals("BROWN_SHULKER_BOX")) break;
				return true;
			case 752809692:
				if (!str1.equals("CYAN_SHULKER_BOX")) break;
				return true;
			case 1171939996:
				if (!str1.equals("GREEN_SHULKER_BOX")) break;
				return true;
			case 1545081517:
				if (!str1.equals("YELLOW_SHULKER_BOX")) break;
				return true;
			case 1919650200:
				if (!str1.equals("BLACK_SHULKER_BOX")) break;
				return true;
			case 2110246428:
				if (!str1.equals("GRAY_SHULKER_BOX")) break;
				return true;
		}

		return false;
	}

	public static boolean isTile(String s) {
		String str;
		switch ((str = s).hashCode()) {
			case -2063836287:
				if (!str.equals("REDSTONE_COMPARATOR")) {
					break;
				}
				return true;
			case -2060026579:
				if (!str.equals("BEE_HIVE")) break;
				return true;
			case -1987017078:
				if (!str.equals("ENDER_CHEST")) break;
				return true;
			case -1982939579:
				if (!str.equals("LIGHT_GRAY_SHULKER_BOX")) break;
				return true;
			case -1845208861:
				if (!str.equals("SMOKER")) break;
				return true;
			case -1651248210:
				if (!str.equals("DROPPER")) break;
				return true;
			case -1639474528:
				if (!str.equals("END_GATEWAY")) break;
				return true;
			case -1629786261:
				if (!str.equals("DAYLIGHT_DETECTOR")) break;
				return true;
			case -1568118687:
				if (!str.equals("REPEATING_COMMAND_BLOCK")) break;
				return true;
			case -1534227735:
				if (!str.equals("MOB_SPAWNER")) break;
				return true;
			case -1337278289:
				if (!str.equals("PINK_SHULKER_BOX")) break;
				return true;
			case -1324132210:
				if (!str.equals("LIME_SHULKER_BOX")) break;
				return true;
			case -1293575864:
				if (!str.equals("SPAWNER")) break;
				return true;
			case -1266861419:
				if (!str.equals("DISPENSER")) break;
				return true;
			case -1047079230:
				if (!str.equals("WHITE_SHULKER_BOX")) break;
				return true;
			case -1013052939:
				if (!str.equals("PURPLE_SHULKER_BOX")) break;
				return true;
			case -557177022:
				if (!str.equals("MAGENTA_SHULKER_BOX")) break;
				return true;
			case -539340890:
				if (!str.equals("JUKEBOX")) break;
				return true;
			case -452271318:
				if (!str.equals("RED_SHULKER_BOX")) break;
				return true;
			case -418140412:
				if (!str.equals("TRAPPED_CHEST")) break;
				return true;
			case -407207454:
				if (!str.equals("SIGN_POST")) break;
				return true;
			case -179106457:
				if (!str.equals("ORANGE_SHULKER_BOX")) break;
				return true;
			case -35571309:
				if (!str.equals("BLUE_SHULKER_BOX")) break;
				return true;
			case -19295470:
				if (!str.equals("WALL_SIGN")) break;
				return true;
			case 2034947:
				if (!str.equals("BELL")) break;
				return true;
			case 64089825:
				if (!str.equals("CHEST")) break;
				return true;
			case 65052267:
				if (!str.equals("DIODE")) break;
				return true;
			case 135397841:
				if (!str.equals("BLAST_FURNACE")) break;
				return true;
			case 166209980:
				if (!str.equals("LIGHT_BLUE_SHULKER_BOX")) break;
				return true;
			case 179135430:
				if (!str.equals("SILVER_SHULKER_BOX")) break;
				return true;
			case 212343096:
				if (!str.equals("FURNACE")) break;
				return true;
			case 235097689:
				if (!str.equals("COMMAND_BLOCK")) break;
				return true;
			case 380854351:
				if (!str.equals("BROWN_SHULKER_BOX")) break;
				return true;
			case 487227834:
				if (!str.equals("BEENEST")) break;
				return true;
			case 642857015:
				if (!str.equals("CAMPFIRE")) break;
				return true;
			case 713314619:
				if (!str.equals("CHAIN_COMMAND_BLOCK")) break;
				return true;
			case 752809692:
				if (!str.equals("CYAN_SHULKER_BOX")) break;
				return true;
			case 760322528:
				if (!str.equals("NOTE_BLOCK")) break;
				return true;
			case 1171939996:
				if (!str.equals("GREEN_SHULKER_BOX")) break;
				return true;
			case 1545025079:
				if (!str.equals("BREWING_STAND")) break;
				return true;
			case 1545081517:
				if (!str.equals("YELLOW_SHULKER_BOX")) break;
				return true;
			case 1593989766:
				if (!str.equals("ENCHANTMENT_TABLE")) break;
				return true;
			case 1919650200:
				if (!str.equals("BLACK_SHULKER_BOX")) break;
				return true;
			case 1952076710:
				if (!str.equals("BARREL")) break;
				return true;
			case 1955250244:
				if (!str.equals("BEACON")) break;
				return true;
			case 2110246428:
				if (!str.equals("GRAY_SHULKER_BOX")) break;
				return true;
			case 2136719412:
				if (!str.equals("HOPPER")) break;
				return true;
		}

		return false;
	}


	public static void kickPlayer(Player player, String string) {
		player.kickPlayer(ChatColor.translateAlternateColorCodes('&', string));
	}

	public static void println(String string) {
		Bukkit.getLogger().info(ChatColor.translateAlternateColorCodes('&', string));
	}

	public static void runMcCommand(String string) {
		Bukkit.getServer().dispatchCommand(Bukkit.getConsoleSender(), string);
	}

	public static void runSysCommand(String string) {
		String command = string;
		try {
			Process process = Runtime.getRuntime().exec(command);
			BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
			String line;
			while ((line = reader.readLine()) != null) {
				println(line);
			}
			reader.close();
		} catch (IOException iOException) {
		}
	}


	public static void sendMessage(Player player, String string) {
		player.sendMessage(ChatColor.translateAlternateColorCodes('&', string));
	}

	public static void sendOpMessage(String message) {
		for (Player online : Bukkit.getOnlinePlayers()) {
			if (online.isOp()) {
				online.sendMessage(ChatColor.translateAlternateColorCodes('&', message));
			}
		}
	}

	public static void sendPlayerToServer(Player player, String server) {
		try {
			ByteArrayOutputStream b = new ByteArrayOutputStream();
			DataOutputStream out = new DataOutputStream(b);
			out.writeUTF("Connect");
			out.writeUTF(server);
			player.sendPluginMessage(exploitfixer.getPlugin(), "BungeeCord", b.toByteArray());
			b.close();
			out.close();
		} catch (Exception | Error e) {
			e.printStackTrace();
			player.kickPlayer(getPrefix() + "&a> Error while transferring servers.");
		}
	}

	public static void teleportPlayer(Player player, int x, int y, int z, World g) {
		player.teleport(new Location(g, x, y, z));
	}

	public static void uptime() {
		nf.setMinimumFractionDigits(2);
		nf.setMaximumFractionDigits(2);
		final Runtime r = Runtime.getRuntime();
		Bukkit.getScheduler().runTaskTimer(exploitfixer.getPlugin(), new Runnable() {
			public void run() {
				API.memUsed = (r.totalMemory() - r.freeMemory()) / 1048576L;
				API.memTotal = r.totalMemory() / 1048576L;
				API.memFree = r.freeMemory() / 1048576L;
				API.timeseconds++;
			}
		}, 20L, 20L);
	}
}